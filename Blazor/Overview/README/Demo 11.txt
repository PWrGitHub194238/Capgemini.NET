=========================================================================================
=========================================================================================
Demo 11
=========================================================================================
=========================================================================================
Demo goal: provide a component for rateable icon, remove base class logic for RateComponent

---------------------------------------------------------------------------------
Demo 11 > 1 > Replace HTML markup for the icons with a component, use event callbacks to use base class logic
---------------------------------------------------------------------------------

RateIconComponent.razor
 - add new file:
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<i class="@(IsActive ? ActiveCss : InActiveCss) @(Icon) cursor-pointer"
    alt="@IconRate"
    @onclick="@(() => ValueChanged.InvokeAsync(IconRate))"
    @onmouseover="@(() => OnFocusChanged.InvokeAsync(true))"
    @onmouseout="@(() => OnFocusChanged.InvokeAsync(false))"></i>

@code {
    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public int IconRate { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public int FocusedValue { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public EventCallback<bool> OnFocusChanged { get; set; }

    [Parameter]
    public string ActiveCss { get; set; } = "fas";

    [Parameter]
    public string InActiveCss { get; set; } = "far";

    private bool IsActive => (IsFocused && IconRate <= FocusedValue)
        || (!IsFocused && IconRate <= Value);
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - replace <i>:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@foreach (int i in Enumerable.Range(Product.MinRate - 1, Product.MaxRate - Product.MinRate + 1))
{
	<i class="@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) @(Icon) cursor-pointer"
	   @onclick="SetRate"
	   @onmouseover="@(() => ShowRate(i))"
	   @onmouseout=RevertRate></i>
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
{
	<RateIconComponent
		Icon="@Icon"
		IconRate="@i"
		Value="@Rate"
		FocusedValue="@tempRate"
		ValueChanged="@(async (selectedRate) => { Rate = selectedRate; await SetRate(); })"
		IsFocused="@focus"
		OnFocusChanged="@((isFocused) => { focus = isFocused; tempRate = i; })" />
}
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
 - provide 2 private missing fields:
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private bool focus;
private int tempRate = 0;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 11 > 2 > Replace the base class logic with context class
---------------------------------------------------------------------------------

RateComponent.razor
 - remove @inherits RateComponentBaseWithTask
 - replace Rate parameters -> CurrentRateInt
 - update CurrentRateInt property:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Product.CurrentRate = Rate;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private int CurrentRateInt => Product.CurrentRate ?? 0;
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private int CurrentRateInt
{
	get => Product.CurrentRate ?? 0;
	set => ProductRated.InvokeAsync(value);
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - remove OnParametersSet and SetRate methods
 - update ValueChanged for RateIconComponent:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
ValueChanged="@(async (selectedRate) => { CurrentRateInt = selectedRate; await SetRate(); })"
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ValueChanged="@((selectedRate) => CurrentRateInt = selectedRate)"
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateContext
 - create a new class:
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
namespace Capgemini.Net.Blazor.Components.Demo11.Start
{
    public class RateContext
    {
        public bool IsFocused { get; set; }

        public int FocusedRateValue { get; set; }
    }
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - replace fields with a class:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private bool focus;
private int tempRate = 0;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private RateContext RateContext = new RateContext();
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace RateIconComponent FocusedValue delegate:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FocusedValue="@tempRate"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FocusedValue="@(RateContext.FocusedRateValue)"
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace RateIconComponent IsFocused and OnFocusChanged:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
IsFocused="@focus"
OnFocusChanged="@((isFocused) => { focus = isFocused; tempRate = i; })" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
IsFocused="@(RateContext.IsFocused)"
OnFocusChanged="@((isFocused) => { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" />
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
				
				
---------------------------------------------------------------------------------
Demo 11 > 3 > Simplify the logic for RateIconComponent handled by its parameters and event callbacks
---------------------------------------------------------------------------------

RateComponent.razor
 - replace:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Value="@CurrentRateInt"
...
ValueChanged="@((selectedRate) => CurrentRateInt = selectedRate)"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@bind-Value="@CurrentRateInt"
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateIconComponent.razor
 - replace EventCallback:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[Parameter]
public EventCallback<bool> OnFocusChanged { get; set; }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Parameter]
public EventCallback<int> OnRateIconFocused { get; set; }

[Parameter]
public EventCallback<bool> OnRateIconFocusChanged { get; set; }
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add OnMouseOver and OnMouseOut

03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private async Task OnMouseOver()
{
	await OnRateIconFocused.InvokeAsync(IconRate);
	await OnRateIconFocusChanged.InvokeAsync(true);
}

private async Task OnMouseOut()
{
	await OnRateIconFocusChanged.InvokeAsync(false);
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace delegates in markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@onmouseover="@(() => OnFocusChanged.InvokeAsync(true))"
@onmouseout="@(() => OnFocusChanged.InvokeAsync(false))"></i>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onmouseover="@(() => OnMouseOver())"
@onmouseout="@(() => OnMouseOut())"></i>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - update bindings for RateIconComponent:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
OnFocusChanged="@((isFocused) => { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OnRateIconFocused="@((rateOnFocus) => RateContext.FocusedRateValue = rateOnFocus)"
OnRateIconFocusChanged="@((isFocused) => RateContext.IsFocused = isFocused)"/>
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - again replace RateIconComponent markup:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FocusedValue="@(RateContext.FocusedRateValue)"
@bind-Value="@CurrentRateInt"
IsFocused="@(RateContext.IsFocused)"
OnRateIconFocused="@((rateOnFocus) => RateContext.FocusedRateValue = rateOnFocus)"
OnRateIconFocusChanged="@((isFocused) => RateContext.IsFocused = isFocused)"/>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@bind-Value="@CurrentRateInt"
@bind-IsFocused="@(RateContext.IsFocused)"
@bind-IsFocused:event="OnRateIconFocusChanged"
@bind-FocusedValue="@(RateContext.FocusedRateValue)"
@bind-FocusedValue:event="OnRateIconFocused"/>
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 11 > 4 > Reduce the complexity of the callbacks, wrap all rate icons with a tag to handle on focus events
---------------------------------------------------------------------------------

RateComponent.razor
 - replace markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="icon-rate-container">
	@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
	{
		<RateIconComponent
			Icon="@Icon"
			IconRate="@i"
			@bind-Value="@CurrentRateInt"
			@bind-IsFocused="@(RateContext.IsFocused)"
			@bind-IsFocused:event="OnRateIconFocusChanged"
			@bind-FocusedValue="@(RateContext.FocusedRateValue)"
			@bind-FocusedValue:event="OnRateIconFocused"/>
	}
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="icon-rate-container" @onmouseover="@(() => RateContext.IsFocused = true)" @onmouseout="@(() => RateContext.IsFocused = false)">
	<CascadingValue Value="@RateContext" IsFixed="true">
		@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
		{
			<RateIconComponent Icon="@Icon" IconRate="@i" @bind-Value="@CurrentRateInt"/>
		}
	</CascadingValue>
</div>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateIconComponent.razor
 - add CascadingParameter:
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter]
public RateContext Context { get; set; } = default!;
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - remove:
  - FocusedValue
  - IsFocused
  - OnRateIconFocused
  - OnRateIconFocusChanged
 - replace methods:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private bool IsActive => (IsFocused && IconRate <= FocusedValue)
	|| (!IsFocused && IconRate <= Value);

private async Task OnMouseOver()
{
	await OnRateIconFocused.InvokeAsync(IconRate);
	await OnRateIconFocusChanged.InvokeAsync(true);
}

private async Task OnMouseOut()
{
	await OnRateIconFocusChanged.InvokeAsync(false);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private bool IsActive => (Context.IsFocused && IconRate <= Context.FocusedRateValue)
	|| (!Context.IsFocused && IconRate <= Value);

private void OnMouseOver()
{
	Context.IsFocused = true;
	Context.FocusedRateValue = IconRate;
}

private void OnMouseOut() => Context.IsFocused = false;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

