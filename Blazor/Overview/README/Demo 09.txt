=========================================================================================
=========================================================================================
Demo 09
=========================================================================================
=========================================================================================
Demo goal: remove the form and fetch data from the API

---------------------------------------------------------------------------------
Demo 09 > 1 > Review changes in initial component
---------------------------------------------------------------------------------

- to skip, just mention that some changes were made to prepare for the demo
- in short:
 - ContainerComponent.razor: form was removed, leave only render fragment
 - ContainerComponent.razor.cs: fixed content for render fragment is here, 
 everything else was removed
 - RateComponent.razor: AvgRate part was moved back (to make Container only focus on API)
 - RateComponent.razor.cs: removed as it had only a logic for Rate < MaxRate
 and this is not needed as we removed the form.
 

---------------------------------------------------------------------------------
Demo 09 > 2 > Call the API to fetch rate data for a product, handle HttpClient's exceptions
---------------------------------------------------------------------------------

ContainerComponent.razor.cs
 - replace the content to add HttpClient and lifecycle method to fetch
 - replace default fixed product object with one from the API
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private readonly IRateableProduct product = new RateableProduct()
{
	MinRate = 2,
	AverageRate = 3,
	MaxRate = 6,
	CurrentRate = 3,
};

[Parameter]
public RenderFragment<IRateableProduct> ChildContent { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Inject]
public HttpClient HttpClient { get; set; } = default!;

[Parameter]
public RenderFragment<IRateableProduct> ChildContent { get; set; } = default!;

private IRateableProduct product = new RateableProduct();

protected override async Task OnInitializedAsync()
{
	var rateableProductViewModel = await HttpClient
		.GetFromJsonAsync<RateableProductViewModel>("products/1");

	if (rateableProductViewModel is not null)
	{
		product = new RateableProduct()
		{
			MinRate = rateableProductViewModel.MinRate,
			AverageRate = rateableProductViewModel.AverageRate,
			MaxRate = rateableProductViewModel.MaxRate,
			CurrentRate = rateableProductViewModel.CurrentRate,
		};
	}
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - add logger:
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Inject]
public ILogger<ContainerComponent> Logger { get; set; } = default!;
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - and handle errors:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
var rateableProductViewModel = await HttpClient
	.GetFromJsonAsync<RateableProductViewModel>("products/1");

if (rateableProductViewModel is not null)
{
	product = new RateableProduct()
	{
		MinRate = rateableProductViewModel.MinRate,
		AverageRate = rateableProductViewModel.AverageRate,
		MaxRate = rateableProductViewModel.MaxRate,
		CurrentRate = rateableProductViewModel.CurrentRate,
	};
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
try
{
	var rateableProductViewModel = await HttpClient
		.GetFromJsonAsync<RateableProductViewModel>("products/1");

	if (rateableProductViewModel is not null)
	{
		product = new RateableProduct()
		{
			MinRate = rateableProductViewModel.MinRate,
			AverageRate = rateableProductViewModel.AverageRate,
			MaxRate = rateableProductViewModel.MaxRate,
			CurrentRate = rateableProductViewModel.CurrentRate,
		};
	}
}
catch (HttpRequestException e1)
{
	Logger.LogError(
		e1,
		Properties.Resources.LOG_ERROR_CANNOT_FETCH,
		"products/1");
}
catch (NotSupportedException e2)
{
	Logger.LogError(
		e2,
		Properties.Resources.LOG_ERROR_RESPONSE_INVALID_FORMAT,
		"products/1");
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 09 > 3 > Handle incomplete asynchronous actions at render
---------------------------------------------------------------------------------

ContainerComponent.razor.cs
 - change product to nulable type
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private IRateableProduct product = new RateableProduct();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private IRateableProduct? product;
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - use adapter class:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
product = new RateableProduct()
{
	MinRate = rateableProductViewModel.MinRate,
	AverageRate = rateableProductViewModel.AverageRate,
	MaxRate = rateableProductViewModel.MaxRate,
	CurrentRate = rateableProductViewModel.CurrentRate,
};
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
product = new RateableProductAdapter(rateableProductViewModel);
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - update markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="demo__container_wrapper">
    @ChildContent(product)
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="demo__container_wrapper">
    @if (product is null)
    {
        <LoadPlaceholder>
            <Message>
                <p>Loading product</p>
            </Message>
        </LoadPlaceholder>
    }
    else
    {
        <div class="demo__container">
            @ChildContent(product)
        </div>
    }
</div>
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
ContainerComponent.razor
 - provide a loading message:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<p>Loading product</p>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<p>@loadingMessage</p>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - provide a loadingMessage field:
 
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private string loadingMessage = "Loading product";
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - and update message on final:
 
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finally
{
	if (product is null)
	{
		loadingMessage = "Loading error";
	}
}
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 09 > 4 > Use NavigationManager to fetch different products dynamically
---------------------------------------------------------------------------------

ContainerComponent.razor.cs
 - add ProductId and endopint var
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter(Name = "Id")]
public int ProductId { get; set; }

public string Endpoint => $"products/{ProductId}";
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace:
 "products/1" -> Endpoint
 
 
ContainerComponent.razor
 - add anchors to the EOF to switch between products

02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="navigation-bar">
    @foreach (int productId in Enumerable.Range(1, 5))
    {
		<a href="#"
		   @onclick="@(() => NavigationManager.NavigateTo($"/demo09/{productId}"))"
		   @onclick:preventDefault
		>
			@productId
		</a>
    }
</div>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - inject NavigationManager:

03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Inject]
public NavigationManager NavigationManager { get; set; } = default!;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - replace <a> with <NavLink>:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<a href="#"
   @onclick="@(() => NavigationManager.NavigateTo($"/demo09/{productId}"))"
   @onclick:preventDefault>
	@productId
</a>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<NavLink href="@($"/demo09/{productId}")">
	@productId
</NavLink>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add using statement to the top:

05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@using Microsoft.AspNetCore.Components.Routing
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PROBLEM ON RUN: changing products won't update the UI

ContainerComponent.razor.cs
 - replace lifecycle method:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
protected override async Task OnInitializedAsync()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
protected override async Task OnParametersSetAsync()
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - replace <NavLink> with <ProductButton>:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<NavLink href="@($"/demo09/{productId}")">
	@productId
</NavLink>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<ProductButton ProductId="@productId" />
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 09 > 5 > Provide default content for unused render fragments
---------------------------------------------------------------------------------

RateComponent.razor
 - add before AvgRate
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="current-rate-container">
    @Product.CurrentRate
</div>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add after AvgRate
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="max-rate-container">
    @Product.MaxRate
</div>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


RateComponent.razor
 - update for render fragments:
 
 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@Product.CurrentRate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@if (CurrentRate is null)
{
	@CurrentRateInt
}
else
{
	@CurrentRate(CurrentRateContext)
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@Product.MaxRate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@if (MaxRate is null)
{
	@(Product.MaxRate)
}
else
{
	@MaxRate(Product.MaxRate)
}
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace @code {} block:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment<AverageRateContext> AvgRate { get; set; } = default!;

    private AverageRateContext AverageRateContext => new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment<AverageRateContext> CurrentRate { get; set; } = default!;

    [Parameter]
    public RenderFragment<AverageRateContext> AvgRate { get; set; } = default!;

    [Parameter]
    public RenderFragment<int> MaxRate { get; set; } = default!;

    private int CurrentRateInt => Product.CurrentRate ?? 0;

    private string CurrentRateString => Product.CurrentRate.HasValue ? Product.CurrentRate.Value.ToString() : "---";

    private AverageRateContext CurrentRateContext => new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = (decimal) CurrentRateInt,
        MaxRate = Product.MaxRate,
    };

    private AverageRateContext AverageRateContext => new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };
}
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - update markup for default render fragments:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="current-rate-container">
    @if (CurrentRate is null)
    {
        @CurrentRateInt
    }
    else
    {
        @CurrentRate(CurrentRateContext)
    }
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@CurrentRate(CurrentRateContext)
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@if (MaxRate is null)
{
	@(Product.MaxRate)
}
else
{
	@MaxRate(Product.MaxRate)
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@MaxRate(Product.MaxRate)
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - update render fragments:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
public RenderFragment<AverageRateContext> CurrentRate { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<AverageRateContext> CurrentRate { get; set; } = context => __builder =>
{
	@if (@context.AvgRate > 0)
	{
		<DefaultAverageRateComponent
			MinRate="@context.MinRate"
			AvgRate="@context.AvgRate"
			MaxRate="@context.MaxRate" />
	} else
	{
		@: ---
	}
};
08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
public RenderFragment<AverageRateContext> AvgRate { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<AverageRateContext> AvgRate { get; set; } = context => __builder =>
{
	<DefaultAverageRateComponent
		MinRate="@context.MinRate"
		AvgRate="@context.AvgRate"
		MaxRate="@context.MaxRate" />
};
09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
public RenderFragment<int> MaxRate { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<int> MaxRate { get; set; } = context => __builder =>
{
	@context
};
10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


