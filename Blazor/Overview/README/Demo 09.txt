=========================================================================================
=========================================================================================
Demo 09
=========================================================================================
=========================================================================================

- for this demo form was removed

Demo goal: remove the form and fetch data from the API

---------------------------------------------------------------------------------
Demo 09 > 1 > Review changes in initial component
---------------------------------------------------------------------------------

- to skip, just mention that some changes were made to prepare for the demo
- in short:
 - ContainerComponent.razor: form was removed, leave only render fragment
 - ContainerComponent.razor.cs: fixed content for render fragment is here, 
 everything else was removed
 - RateComponent.razor: AvgRate part was moved back (to make Container only focus on API)
 - RateComponent.razor.cs: removed as it had only a logic for Rate < MaxRate
 and this is not needed as we removed the form.
 

---------------------------------------------------------------------------------
Demo 09 > 2 > Call the API to fetch rate data for a product, handle HttpClient's exceptions
---------------------------------------------------------------------------------

1. We want to replace a default IRateableProduct instance with fixed values. The IRateableProduct product field will be populated by the API.


ContainerComponent.razor.cs
 - replace the content to add HttpClient and lifecycle method to fetch
 - replace default fixed product object with one from the API
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private readonly IRateableProduct product = new RateableProduct()
{
	MinRate = 2,
	AverageRate = 3,
	MaxRate = 6,
	CurrentRate = 3,
};

[Parameter]
public RenderFragment<IRateableProduct> ChildContent { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Inject]
public HttpClient HttpClient { get; set; } = default!;

[Parameter]
public RenderFragment<IRateableProduct> ChildContent { get; set; } = default!;

private IRateableProduct product = new RateableProduct();

protected override async Task OnInitializedAsync()
{
	var rateableProductViewModel = await HttpClient
		.GetFromJsonAsync<RateableProductViewModel>("products/1");

	if (rateableProductViewModel is not null)
	{
		product = new RateableProduct()
		{
			MinRate = rateableProductViewModel.MinRate,
			AverageRate = rateableProductViewModel.AverageRate,
			MaxRate = rateableProductViewModel.MaxRate,
			CurrentRate = rateableProductViewModel.CurrentRate,
		};
	}
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. Inject

3. HttpClient

4. GetFromJsonAsync helper method

PROBLEM ON RUN: we cannot tell if the API is working or not in the UI. Even worst: exception is thrown

5. Add error handling:
 - inject logger,
 - add try-catch

ContainerComponent.razor.cs
 - add logger:
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Inject]
public ILogger<ContainerComponent> Logger { get; set; } = default!;
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - and handle errors:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
var rateableProductViewModel = await HttpClient
	.GetFromJsonAsync<RateableProductViewModel>("products/1");

if (rateableProductViewModel is not null)
{
	product = new RateableProduct()
	{
		MinRate = rateableProductViewModel.MinRate,
		AverageRate = rateableProductViewModel.AverageRate,
		MaxRate = rateableProductViewModel.MaxRate,
		CurrentRate = rateableProductViewModel.CurrentRate,
	};
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
try
{
	var rateableProductViewModel = await HttpClient
		.GetFromJsonAsync<RateableProductViewModel>("products/1");

	if (rateableProductViewModel is not null)
	{
		product = new RateableProduct()
		{
			MinRate = rateableProductViewModel.MinRate,
			AverageRate = rateableProductViewModel.AverageRate,
			MaxRate = rateableProductViewModel.MaxRate,
			CurrentRate = rateableProductViewModel.CurrentRate,
		};
	}
}
catch (HttpRequestException e1)
{
	Logger.LogError(
		e1,
		Properties.Resources.LOG_ERROR_CANNOT_FETCH,
		"products/1");
}
catch (NotSupportedException e2)
{
	Logger.LogError(
		e2,
		Properties.Resources.LOG_ERROR_RESPONSE_INVALID_FORMAT,
		"products/1");
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


6. Ok, we hide runtime exceptions. But until the data is erturned, we should display some placeholder.


---------------------------------------------------------------------------------
Demo 09 > 3 > Handle incomplete asynchronous actions at render
---------------------------------------------------------------------------------

1. We will use another component for this demo to show the loading "spinner" while the API is fetching data.

2. We will use adapter class to ommit manual rewriting for all properties.

ContainerComponent.razor.cs
 - change product to nulable type
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private IRateableProduct product = new RateableProduct();
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private IRateableProduct? product;
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - use adapter class:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
product = new RateableProduct()
{
	MinRate = rateableProductViewModel.MinRate,
	AverageRate = rateableProductViewModel.AverageRate,
	MaxRate = rateableProductViewModel.MaxRate,
	CurrentRate = rateableProductViewModel.CurrentRate,
};
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
product = new RateableProductAdapter(rateableProductViewModel);
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - update markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="demo__container_wrapper">
    @ChildContent(product)
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="demo__container_wrapper">
    @if (product is null)
    {
        <LoadPlaceholder>
            <Message>
                <p>Loading product</p>
            </Message>
        </LoadPlaceholder>
    }
    else
    {
        <div class="demo__container">
            @ChildContent(product)
        </div>
    }
</div>
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
2. We can use Message RenderFragment of LoadPlaceholder to provide a message if the API returns an error. Without it the spinner will be displayed forever with the "Loading product"

 
ContainerComponent.razor
 - provide a loading message:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<p>Loading product</p>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<p>@loadingMessage</p>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - provide a loadingMessage field:
 
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private string loadingMessage = "Loading product";
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - and update message on final:
 
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
finally
{
	if (product is null)
	{
		loadingMessage = "Loading error";
	}
}
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PROBLEM ON RUN: upon icon click no data is refreshed. Should be send to the API. We il handle that in next demo.

PROBLEM ON RUN: each time we run the solution, we end up with same product loaded.

3. Let us add buttons for products, by clicking on of them we would load the product with given ID.

---------------------------------------------------------------------------------
Demo 09 > 4 > Use NavigationManager to fetch different products dynamically
---------------------------------------------------------------------------------

1. In order to do that we will use a Id CascadingParameter which is provided to us by some other parent component and the value is read from the route that was used.

2. We will add:
 - buttons for each Id,
 - have to inject NavigationManager,
 - we will use several aproaches to those buttons,
 - for 1st (with <a>) we will use preventDefault

ContainerComponent.razor.cs
 - add ProductId and endopint var
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter(Name = "Id")]
public int ProductId { get; set; }

public string Endpoint => $"products/{ProductId}";
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace:
 "products/1" -> Endpoint
 
 
ContainerComponent.razor
 - add anchors to the EOF to switch between products

02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="navigation-bar">
    @foreach (int productId in Enumerable.Range(1, 5))
    {
		<a href="#"
		   @onclick="@(() => NavigationManager.NavigateTo($"/demo09/{productId}"))"
		   @onclick:preventDefault
		>
			@productId
		</a>
    }
</div>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - inject NavigationManager:

03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Inject]
public NavigationManager NavigationManager { get; set; } = default!;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3. We can do better and replace <a> with <NavLink> that injects NavigationManager by its own and we have to only provide a href and content for the button

ContainerComponent.razor
 - replace <a> with <NavLink>:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<a href="#"
   @onclick="@(() => NavigationManager.NavigateTo($"/demo09/{productId}"))"
   @onclick:preventDefault>
	@productId
</a>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<NavLink href="@($"/demo09/{productId}")">
	@productId
</NavLink>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add using statement to the top:

05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@using Microsoft.AspNetCore.Components.Routing
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PROBLEM ON RUN: changing products won't update the UI

ContainerComponent.razor.cs
 - replace lifecycle method:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
protected override async Task OnInitializedAsync()
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
protected override async Task OnParametersSetAsync()
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4. We can also use ready component which will provide same functionality but will have styles we want. It is also provide the prefix for the URL we want, so we just need to provide a productId. Text for the button is laso provided by us.

ContainerComponent.razor
 - replace <NavLink> with <ProductButton>:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<NavLink href="@($"/demo09/{productId}")">
	@productId
</NavLink>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<ProductButton ProductId="@productId" />
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 09 > 5 > Provide default content for unused render fragments
---------------------------------------------------------------------------------

1. Before we end this demo, let us provide a way for our markup to display default rendering fragments in case such fragment was not provided. At least it would be desireable to display something instead of showing nothing or worst - throw an error, like now.

2. We would do that in two ways:
 - provide branching markup to display the default part if RenderFragment is null,
 - provide a init value for the RenderFragment properties

3. Let us add aditional infor about the product first. With raw values only.

RateComponent.razor
 - add before AvgRate
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="current-rate-container">
    @Product.CurrentRate
</div>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add after AvgRate
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="max-rate-container">
    @Product.MaxRate
</div>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4. change to render fragments with same defaults. We will provide:
 - a markup,
 - code change to provide:
  - CurrentRate RenderFragment,
  - MaxRate RenderFragment,
  - related things

RateComponent.razor
 - update for render fragments:
 <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@Product.CurrentRate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@if (CurrentRate is null)
{
	@CurrentRateString
}
else
{
	@CurrentRate(CurrentRateContext)
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@Product.MaxRate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@if (MaxRate is null)
{
	@(Product.MaxRate)
}
else
{
	@MaxRate(Product.MaxRate)
}
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace @code {} block:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment<AverageRateContext> AvgRate { get; set; } = default!;

    private AverageRateContext AverageRateContext => new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment<AverageRateContext> CurrentRate { get; set; } = default!;

    [Parameter]
    public RenderFragment<AverageRateContext> AvgRate { get; set; } = default!;

    [Parameter]
    public RenderFragment<int> MaxRate { get; set; } = default!;

    private int CurrentRateInt => Product.CurrentRate ?? 0;

    private string CurrentRateString => Product.CurrentRate.HasValue ? Product.CurrentRate.Value.ToString() : "---";

    private AverageRateContext CurrentRateContext => new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = (decimal) CurrentRateInt,
        MaxRate = Product.MaxRate,
    };

    private AverageRateContext AverageRateContext => new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };
}
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. We have provided a markup with optional render fragments,

6. we added:
 - RenderFragment<AverageRateContext> CurrentRate,
 - we used the same context class as for AvgRate, we only change the AvgRate assignment to (decimal)CurrentRateInt (CurrentRateContext),
 - we used CurrentRateString as default for CurrentRate ("value/"---")
 - RenderFragment<int> MaxRate

7. It is working, we can also add this code directly as initial values for RenderFragment properties in several ways.
 - revert markup that handle nulls,
 - add default values for RenderFragments

RateComponent.razor
 - update markup for default render fragments:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="current-rate-container">
    @if (CurrentRate is null)
    {
        @CurrentRateString
    }
    else
    {
        @CurrentRate(CurrentRateContext)
    }
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@CurrentRate(CurrentRateContext)
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@if (MaxRate is null)
{
	@(Product.MaxRate)
}
else
{
	@MaxRate(Product.MaxRate)
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@MaxRate(Product.MaxRate)
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - update render fragments:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
public RenderFragment<AverageRateContext> CurrentRate { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<AverageRateContext> CurrentRate { get; set; } = context => __builder =>
{
	@if (@context.AvgRate > 0)
	{
		<DefaultAverageRateComponent
			MinRate="@context.MinRate"
			AvgRate="@context.AvgRate"
			MaxRate="@context.MaxRate" />
	} else
	{
		@: ---
	}
};
08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
public RenderFragment<AverageRateContext> AvgRate { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<AverageRateContext> AvgRate { get; set; } = context => __builder =>
{
	<DefaultAverageRateComponent
		MinRate="@context.MinRate"
		AvgRate="@context.AvgRate"
		MaxRate="@context.MaxRate" />
};
09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
public RenderFragment<int> MaxRate { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<int> MaxRate { get; set; } = context => __builder =>
{
	@context
};
10 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


8. There are other ways to do the same, see description for more examples
