Intro:
- who am I and what we are goinig to do:
 - as You may noticed this is devided into 2 parts,
   today only implementing the app, do not worry about how to create it, it will be cover in part 2
   along with every tech details. Today only code.
 - if I would manage to get somebody interensed, I would be more than happy to invaite this individual to part two, next week.
- So what we are going to do: https://github.com/PWrGitHub194238/Capgemini.NET/tree/master/Blazor/Overview
 - here's agenda for quick reference
 - we are going to work with a Blazor app, developing Blazor stuff,
 - the whole app was written to support everybody who whants to go through it on his/her own,
 - quick walkthrough about the struct:
  - checkpoints,
  - descriptions with many more content that is needed,
  - start | final
- goal is to create a component to rate products with as much reusability/openess for changes as possible.

=========================================================================================
=========================================================================================
Demo 01
=========================================================================================
=========================================================================================
Demo goal: build a basic row of selectable and focusable icons to represent the rate

...as shown to the right

---------------------------------------------------------------------------------
Demo 01 > 1 > Copy HTML markup with already provided JavaScript calls
---------------------------------------------------------------------------------
1. ./Start/RateComponent.razor
 - replace entire content:
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@for (int i = 0; i < 5; i += 1)
{
    <i class="rate-icon far fa-star cursor-pointer"
        onclick="CapgeminiNetBlazorComponents.setRate()"
        onmouseover="@("CapgeminiNetBlazorComponents.showRate(" + i + ")")"
        onmouseout="CapgeminiNetBlazorComponents.revertRate()"></i>
}

@code {

}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. The above code is used to display rating stars with basic hover, click events.

3. The CapgeminiNetBlazorComponents is a namespace defined by the .\wwwroot\js\main.ts file

4. It is very easy to make VS compile TS files into js files, if somebody is itnerested, read more about:
 - Microsoft.TypeScript.MSBuild (in Capgemini.Net.Blazor.Components.Demo01)
 
5. Open .\wwwroot\js\main.ts
 - window['CapgeminiNetBlazorComponents'] = new Demo01();
 - Capgemini.Net.Blazor.Components.load();
 - public rate: number = 0; - actual value selected,
 - public tempRate: number = 0; - value we hover on
 - and each time we change our hover/selection, styles for each icon is refreshed in updateRateIconActiveState
 - we use Font Awesome icon set so we make an icon "selected" by just replacing INACTIVE_STYLE/ACTIVE_STYLE and vice versa.
 - rest is irrelevant
 // keep te file open for Demo01.2
 
6. Of course this is not what we supposed to be talking about, isn't it. We supposed to talk about Blazor. So let's talk about Blazor. And get rid of that TS file.

---------------------------------------------------------------------------------
Demo 01 > 2 > Migrate TypeScript code directly into Razor Component
---------------------------------------------------------------------------------
1. We want to add TypeScript functions to Razor file in C#:

./Start/RateComponent.razor
 - replace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@code {

}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
with
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@code {
    private static string ACTIVE_STYLE = "fas";
    private static string INACTIVE_STYLE = "far";

    public int rate = 0;
    public int tempRate = 0;

    public void SetRate() => rate = tempRate;

    public void ShowRate(int index) => tempRate = index;

    public void RevertRate() => tempRate = rate;

    private bool IsActive(int index) => index <= tempRate;
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. As You can see we preety much just copy over the logic, getting rid of
 - of course that load
 - that constructor
 - that updateRateIconActiveState
 - and all its occurences
 - as we are going to make Blazor handle the updateRateIconActiveState for us
 
3. of course this would run as before. We didn't do anything yet, just added some random code to our Razor Component.

4. to actually use those methods, we would replace the markup above

---------------------------------------------------------------------------------
Demo 01 > 3 > Change DOM event handlers to Blazor event handlers
---------------------------------------------------------------------------------
1. To use the code we added DOM aatributes have to be replaced with Blazor directives:

./Start/RateComponent.razor
 - replace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
onclick="CapgeminiNetBlazorComponents.setRate()"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
with
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onclick="SetRate"
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
onmouseover="@("CapgeminiNetBlazorComponents.showRate(" + i + ")")"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
with
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onmouseover="@(() => ShowRate(i))"
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

- replace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
onmouseout="CapgeminiNetBlazorComponents.revertRate()"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
with
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onmouseout=RevertRate
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. onmouseover provides an argument so we have to declare our own delegate
that ignores it.
 - we can provide either delegate method name,
 - either with "" or not,
 - either with @ or not, as the type will be infered from the directive (@onclick etc)

3. As updateRateIconActiveState makes the icon classes to be replaced on every update
we have can use one-way data binding (razor syntax)

./Start/RateComponent.razor
 - replace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<i class="rate-icon far fa-star cursor-pointer"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
with
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<i class="@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) fa-star cursor-pointer"
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

PROBLEM ON RUN: icon rates are the same: 5 5 5 5 5
 - just click whatever icon to set rate to 5
 - anybody knows why?
  - hint: how labdas are executed

4. Lambda expression capture reference to local variable which the loop change.
Lamba is triggered on runtime after render and when i = 5 after loop is done.

./Start/RateComponent.razor
 - add after 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@for (int i = 0; i < 5; i += 1)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
int index = i;
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

./Start/RateComponent.razor
 - replace:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@onmouseover="@(() => ShowRate(i))"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
with
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onmouseover="@(() => ShowRate(index))"
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. We can leave IsActive(i) as it would be executed each time loop passes, the value would be proper

RUN again to check the result. Fine? Fine.