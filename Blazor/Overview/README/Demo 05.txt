=========================================================================================
=========================================================================================
Demo 05
=========================================================================================
=========================================================================================
Demo goal: replace the custom buttons with a form, which is build-in.

---------------------------------------------------------------------------------
Demo 05 > 1 > Add additional parameter for component representing average rate
---------------------------------------------------------------------------------

Add AvgRate

RateComponent.razor.cs
 - add 3ed cascading parameter:
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter(Name = "AvgRate")]
public int AvgRate { get; set; } = 3;
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace the whole HTML markup:
 - news are div with classes and @AvgRate (int)
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="rate-container">
    <div class="icon-rate-container">
        @for (int i = 0; i < @MaxRate; i += 1)
        {
            int index = i;
            <i class="@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) @Icon cursor-pointer"
               @onclick="SetRate"
               @onmouseover="@(() => ShowRate(index))"
               @onmouseout=RevertRate></i>
        }
    </div>
    <div class="average-rate-container">
        @AvgRate
    </div>
</div>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Add RateComponent.razor.scss
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.rate-container {
    display: flex;
    flex-direction: column;
    align-items: center;

    .icon-rate-container {
        display: flex;
    }

    .average-rate-container {
        display: flex;
        align-items: center;
        font-family: 'Ubuntu';
        font-weight: bold;
        font-size: large;

        &:before {
            content: 'Average rate: ';
            font-family: 'Ubuntu';
            font-weight: bold;
            text-transform: uppercase;
            font-size: larger;
            padding-right: 15px;
        }
    }
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Note: don't forget to compile scss file

Modify ContainerComponent.razor.cs
 - add AvgRate
 
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private int avgRate = 3;
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public int AvgRate
{
    get => avgRate;
    set => avgRate = Math.Max(1, Math.Min(MaxRate, value));
}
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


Update the ContainerComponent.razor markup:
 - add Avg rate custom input
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<span class="demo__label">Avg rate</span>
<div class="demo__selector">
	<MinusIcon Theme="IconTheme.DARK" OnClick="@(() => AvgRate -= 1)" />
	<strong>@AvgRate</strong>
	<PlusIcon Theme="IconTheme.DARK" OnClick="@(() => AvgRate += 1)" />
</div>
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - wrap @ChildContent with another CascadingValue

07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CascadingValue Name="AvgRate" Value="@AvgRate">
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
</CascadingValue>
08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 05 > 2 > Group rate parameters to form context model for the component
---------------------------------------------------------------------------------

We want to reduce the numbber of cascading values + not rely on primitive types

ContainerComponent.razor
 - replace markup
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<CascadingValue Name="MaxRate" Value="@MaxRate">
	<CascadingValue Name="AvgRate" Value="@AvgRate">
		<CascadingValue Value="@this[iconIndex]">
			<div class="demo__container">
				@ChildContent
			</div>
		</CascadingValue>
	</CascadingValue>
</CascadingValue>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CascadingValue Value="@rateContext">
	<div class="demo__container">
		@ChildContent
	</div>
</CascadingValue>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Create RateContext.cs class:

02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
namespace Capgemini.Net.Blazor.Components.Demo05.Start
{
    public class RateContext
    {
    }
}
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - Add readonly field at the beginning:
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private readonly RateContext rateContext = new RateContext();
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateContext.cs
 - replace all with:
 
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using System;

namespace Capgemini.Net.Blazor.Components.Demo05.Start
{
    public class RateContext
    {
        private int maxRate = 6;
        private int avgRate = 3;
        private int iconIndex;

        public static readonly string[] Icons = {
            "fa-star",
            "fa-grin-stars",
            "fa-angry",
            "fa-sun"
        };

        public string Icon => Icons[IconIndex];

        public int MaxRate
        {
            get => maxRate;
            set => maxRate = Math.Max(2, value);
        }

        public int AvgRate
        {
            get => avgRate;
            set => avgRate = Math.Max(1, Math.Min(MaxRate, value));
        }

        public int IconIndex
        {
            get => iconIndex;
            set => iconIndex = value < 0
                ? Icons.Length - 1
                : value >= Icons.Length
                ? 0
                : value;
        }
    }
}
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor.cs
 - remove all but:

05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using Microsoft.AspNetCore.Components;

namespace Capgemini.Net.Blazor.Components.Demo05.Start
{
    public partial class ContainerComponent
    {
        private readonly RateContext rateContext = new RateContext();

        [Parameter]
        public RenderFragment ChildContent { get; set; } = default!;
    }
}
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Update ContainerComponent 
 - replace all fields with object properties:
 
MaxRate -> rateContext.MaxRate
AvgRate  -> rateContext.AvgRate 
IconIndex -> rateContext.IconIndex
@this[iconIndex] -> @(rateContext.Icon)

Update RateComponent.razor:
 - replace @code {}:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[CascadingParameter(Name = "MaxRate")]
public int MaxRate { get; set; } = 5;

[CascadingParameter(Name = "AvgRate")]
public int AvgRate { get; set; } = 3;

[CascadingParameter]
public string Icon { get; set; } = "fa-star";
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter]
public RateContext RateContext { get; set; } = default!;
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - update markup:
 
@MaxRate -> @RateContext.MaxRate
@Icon -> @(RateContext.Icon)
@AvgRate -> @(RateContext.AvgRate)

RateComponent.razor.cs
 - replace 
 
MaxRate -> RateContext.MaxRate

---------------------------------------------------------------------------------
Demo 05 > 3 > Replace raw HTML markup for context model properties modification with custom components
---------------------------------------------------------------------------------

We want to replace the repeated markup for each editable property with a component

ContainerComponent.razor
 - replace:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<span class="demo__label">Max rate</span>
<div class="demo__selector">
	<MinusIcon Theme="IconTheme.DARK" OnClick="@(() => rateContext.MaxRate -= 1)" />
	<strong>@rateContext.MaxRate</strong>
	<PlusIcon Theme="IconTheme.DARK" OnClick="@(() => rateContext.MaxRate += 1)" />
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<IntSelector Label="Max rate" @bind-Value="@(rateContext.MaxRate)" Theme="IconTheme.DARK">
	<strong>@context</strong>
</IntSelector>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<span class="demo__label">Avg rate</span>
<div class="demo__selector">
	<MinusIcon Theme="IconTheme.DARK" OnClick="@(() => rateContext.AvgRate -= 1)" />
	<strong>@rateContext.AvgRate</strong>
	<PlusIcon Theme="IconTheme.DARK" OnClick="@(() => rateContext.AvgRate += 1)" />
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<IntSelector Label="Avg rate" @bind-Value="@(rateContext.AvgRate)" Theme="IconTheme.DARK">
	<strong>@context</strong>
</IntSelector>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<span class="demo__label">Icon</span>
<div class="demo__selector">
	<MinusIcon Theme="IconTheme.DARK" OnClick="@(() => rateContext.IconIndex -= 1)" />
	<i class="far @(rateContext.Icon)"></i>
	<PlusIcon Theme="IconTheme.DARK" OnClick="@(() => rateContext.IconIndex += 1)" />
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<IntSelector Label="Icon" @bind-Value="@(rateContext.IconIndex)" Theme="IconTheme.DARK" StringValue="@((_) => rateContext.Icon)">
	<i class="far @context"></i>
</IntSelector>
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

---------------------------------------------------------------------------------
Demo 05 > 4 > Replace custom parameter value selectors with build-in form component
---------------------------------------------------------------------------------

Introduce build-in EditForm

ContainerComponent.razor
 - replace:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<IntSelector Label="Max rate" @bind-Value="@(rateContext.MaxRate)" Theme="IconTheme.DARK">
	<strong>@context</strong>
</IntSelector>

<IntSelector Label="Avg rate" @bind-Value="@(rateContext.AvgRate)" Theme="IconTheme.DARK">
	<strong>@context</strong>
</IntSelector>

<IntSelector Label="Icon" @bind-Value="@(rateContext.IconIndex)" Theme="IconTheme.DARK" StringValue="@((_) => rateContext.Icon)">
	<i class="far @context"></i>
</IntSelector>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<EditForm Model="@rateContext">
	<span class="demo__label">Max rate</span>
	<InputNumber class="demo__selector" @bind-Value="@rateContext.MaxRate" />

	<span class="demo__label">Avg rate</span>
	<InputNumber class="demo__selector" @bind-Value="@rateContext.AvgRate" />

	<span class="demo__label">Icon</span>
	<InputSelect class="demo__selector" @bind-Value="rateContext.IconIndex">
		@for(int i = 0; i < RateContext.Icons.Length; i += 1)
		{
			<option value="@i">
				@(RateContext.Icons[i])
			</option>
		}
	</InputSelect>
</EditForm>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Remember to add @using Microsoft.AspNetCore.Components.Forms to _Imports.razor

---------------------------------------------------------------------------------
Demo 05 > 5 > Replace build-in input components with custom wrap components to add styles for inputs and custom <option> tag markup
---------------------------------------------------------------------------------

Use custom components that add styles for input controls
One reason - default <option> doesn't allow any markup (icons)

ContainerComponent.razor
 - could be replaced but do not:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@for (int i = 0; i < RateContext.Icons.Length; i += 1)
{
	<option value="@i">
		@(RateContext.Icons[i])
	</option>
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@for(int i = 0; i < RateContext.Icons.Length; i += 1)
{
    string icon = RateContext.Icons[i];
    <option value="@i">
        <div class="fa-cap-option">
	        <i class="far @icon" /> - <strong>@icon</strong>
        </div>
    </option>
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - instead replace:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<span class="demo__label">Max rate</span>
<InputNumber class="demo__selector" @bind-Value="@rateContext.MaxRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CapInput Label="Max rate" InputName="@nameof(rateContext.MaxRate)">
	<InputNumber @bind-Value="@rateContext.MaxRate" />
</CapInput>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<span class="demo__label">Avg rate</span>
<InputNumber class="demo__selector" @bind-Value="@rateContext.AvgRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CapInput Label="Avg rate" InputName="@nameof(rateContext.AvgRate)">
	<InputNumber @bind-Value="@rateContext.AvgRate" />
</CapInput>
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<span class="demo__label">Icon</span>
<InputSelect class="demo__selector" @bind-Value="rateContext.IconIndex">
	@for (int i = 0; i < RateContext.Icons.Length; i += 1)
	{
		<option value="@i">
			@(RateContext.Icons[i])
		</option>
	}
</InputSelect>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CapSelect Label="Icon" @bind-Value="rateContext.IconIndex" ParseValue="@((option) => RateContext.Icons[option])">
	@for (int i = 0; i < RateContext.Icons.Length; i += 1)
	{
		string icon = RateContext.Icons[i];
		<CapOption Key="@i.ToString()" Value="@i">
			<div class="fa-cap-option">
				<i class="far @icon" /> - <strong>@icon</strong>
			</div>
		</CapOption>
	}
</CapSelect>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>