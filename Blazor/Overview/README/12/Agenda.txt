=========================================================================================
=========================================================================================
Demo 12
=========================================================================================
=========================================================================================

- last thing that we want to do is to wrap the mouseover/out logic with the CascadingValue to avoid having the user to type all of those in a right order just to make RateIconComponent working.
- we will also replace RateIconComponent with a RenderFragment

Demo goal: use render fragment for rate icons, use custom CascadingValue component

---------------------------------------------------------------------------------
Demo 12 > 1 > Create custom cascading component to provide the context for the rate icons
---------------------------------------------------------------------------------

1. We will create a component that wraps the logic we want
 - amd provide a scss file

CascadingRateContext.razor
 - create new file:
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="icon-rate-container"
    @onmouseover="@(() => RateContext.IsFocused = true)"
    @onmouseout="@(() => RateContext.IsFocused = false)"
>
    <CascadingValue Value="@RateContext" ChildContent="@ChildContent" IsFixed="true" />
</div>

@code {
    [Parameter]
    public RenderFragment ChildContent { get; set; } = default!;

    private RateContext RateContext = new RateContext();
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - replace markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="icon-rate-container" @onmouseover="@(() => RateContext.IsFocused = true)" @onmouseout="@(() => RateContext.IsFocused = false)">
	<CascadingValue Value="@RateContext" IsFixed="true">
		@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
		{
			<RateIconComponent Icon="@Icon" IconRate="@i" @bind-Value="@CurrentRateInt"/>
		}
	</CascadingValue>
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CascadingRateContext>
	@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
	{
		<RateIconComponent Icon="@Icon" IconRate="@i" @bind-Value="@CurrentRateInt" />
	}
</CascadingRateContext>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

CascadingRateContext.razor.scss
 - add new class
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
.icon-rate-container {
    display: flex;
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Note: remember to compile

---------------------------------------------------------------------------------
Demo 12 > 2 > Enable to use any type of icons for rate component
---------------------------------------------------------------------------------

1. As You can see on the Final example, we would like to have different icons based on the rate it represents.

2. To do that we willL
 - replace RateIconComponent with RenderFragment,
 - provide additional CascadingValue to this (to enable new RenderFragment to still communicate),
 - simplify the RateIconComponent, remove bindings as it will be replaced by the THIS ref from CascadingValue.
 
3. We will also provide a default markup for RenderFragment as before.

RateComponent.razor
 - replace markup with render fragment:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
{
	<RateIconComponent Icon="@Icon" IconRate="@i" @bind-Value="@CurrentRateInt" />
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CascadingValue Value="this">
	<CascadingRateContext>
		@ChildContent(Product)
	</CascadingRateContext>
</CascadingValue>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add RenderFragment parameter:

02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Parameter]
public RenderFragment<IRateableProduct> ChildContent { get; set; } = default!;		
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateIconComponent.razor
 - update code:

03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter]
public RateComponent RateComponent { get; set; } = default!;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - remove EventCallback ValueChanged as as render fragment it won't be used:
 
 - change markup @onclick:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@onclick="@(() => ValueChanged.InvokeAsync(IconRate))"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onclick="@(() => RateComponent.CurrentRateInt = IconRate)"
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - change property visibility:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private int CurrentRateInt
{
	get => Product.CurrentRate ?? 0;
	set => ProductRated.InvokeAsync(value);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public int CurrentRateInt
{
	get => Product.CurrentRate ?? 0;
	set => ProductRated.InvokeAsync(value);
}
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateIconComponent.razor
 - remove Value as parameter, replace with getter

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[Parameter]
public int Value { get; set; }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private int Value => RateComponent.CurrentRateInt;
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - provide default markup for ChildContent:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[Parameter]
public RenderFragment<IRateableProduct> ChildContent { get; set; } = default!;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public RenderFragment<IRateableProduct> ChildContent { get; set; } = context => __builder =>
{
	@foreach (int i in Enumerable.Range(context.MinRate, context.MaxRate - context.MinRate + 1))
	{
		<RateIconComponent IconRate="@i" />
	}
};
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


PROBLEM ON RUN: something is wrong with redrawing the stars, but we wil handle that as a last  step.

4. We can still run it as before, but now we can even customise that in WrapperComponent.

WrapperComponent.razor
 - add custom markup as a node for the RateComponent:

08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<ChildContent Context="Product">
	@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
	{
		<RateIconComponent
			IconRate="@i"
			Icon="@GetRateIcon(@i, Product.MaxRate - Product.MinRate)" />
	}
</ChildContent>
08 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - provide the missing method:

09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private static string GetRateIcon(int productRate, int rateRange) => productRate switch
{
	int rate when rate <= rateRange * 0.2 * 1 => "fa-angry",
	int rate when rateRange * 0.2 * 1 < rate
		&& rate <= rateRange * 0.2 * 2 => "fa-sad-tear",
	int rate when rateRange * 0.2 * 2 < rate
		&& rate <= rateRange * 0.2 * 3 => "fa-meh-blank",
	int rate when rateRange * 0.2 * 3 < rate
		&& rate <= rateRange * 0.2 * 4 => "fa-smile-beam",
	int rate when rateRange * 0.2 * 4 < rate
		&& rate <= rateRange * 0.2 * 5 => "fa-grin-stars",
	_ => "fa-grin-stars",
};
09 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>	

---------------------------------------------------------------------------------
Demo 12 > 3 > Fix change state detection to render icons on any icon focus/blur
---------------------------------------------------------------------------------

1. As our icons are no longer updating their state, we can force the hosting view to update by provinidng a single method to call StateHasChanged:

RateIconComponent.razor:
 - modify methods:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private void OnMouseOver()
{
	Context.IsFocused = true;
	Context.FocusedRateValue = IconRate;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private void OnMouseOver()
{
	Context.IsFocused = true;
	Context.FocusedRateValue = IconRate;
	RateComponent.RateIconComponentFocusHasChanged();
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private void OnMouseOut() => Context.IsFocused = false;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private void OnMouseOut()
{
	Context.IsFocused = false;
	RateComponent.RateIconComponentFocusHasChanged();
}
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - add RateIconComponentFocusHasChanged  method:
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public void RateIconComponentFocusHasChanged() => StateHasChanged();
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


2. It is interesting that we can just replace places for <CascadingValue Value="this"> and  <CascadingRateContext> to make it run.

3. public void RateIconComponentFocusHasChanged() { } // => StateHasChanged();

Anybody knows why?