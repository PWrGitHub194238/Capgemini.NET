=========================================================================================
=========================================================================================
Demo 11
=========================================================================================
=========================================================================================

- last thing that we will do is to separate the icons from the RateComponent and in the next demo we will make that part to be a RenderFragment as well.

Demo goal: provide a component for rateable icon, remove base class logic for RateComponent

---------------------------------------------------------------------------------
Demo 11 > 1 > Replace HTML markup for the icons with a component, use event callbacks to use base class logic
---------------------------------------------------------------------------------

1. We will begin by adding a new component. It will:
 - use multiple EventCallback to notify the common parent about its state,
 - we will use 2 private fields that has to store that shared state
 
2. Generating components instead of raw markup gives us an opportunity to store some values inside those components. For <i> we have to use a base class to manage state for all rendered <i>'s.

RateIconComponent.razor
 - add new file:
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<i class="@(IsActive ? ActiveCss : InActiveCss) @(Icon) cursor-pointer"
    alt="@IconRate"
    @onclick="@(() => ValueChanged.InvokeAsync(IconRate))"
    @onmouseover="@(() => OnFocusChanged.InvokeAsync(true))"
    @onmouseout="@(() => OnFocusChanged.InvokeAsync(false))"></i>

@code {
    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public int IconRate { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public int FocusedValue { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public EventCallback<bool> OnFocusChanged { get; set; }

    [Parameter]
    public string ActiveCss { get; set; } = "fas";

    [Parameter]
    public string InActiveCss { get; set; } = "far";

    private bool IsActive => (IsFocused && IconRate <= FocusedValue)
        || (!IsFocused && IconRate <= Value);
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - replace <i>:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@foreach (int i in Enumerable.Range(Product.MinRate - 1, Product.MaxRate - Product.MinRate + 1))
{
	<i class="@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) @(Icon) cursor-pointer"
	   @onclick="SetRate"
	   @onmouseover="@(() => ShowRate(i))"
	   @onmouseout=RevertRate></i>
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
{
	<RateIconComponent
		Icon="@Icon"
		IconRate="@i"
		Value="@Rate"
		FocusedValue="@tempRate"
		ValueChanged="@(async (selectedRate) => { Rate = selectedRate; await SetRate(); })"
		IsFocused="@focus"
		OnFocusChanged="@((isFocused) => { focus = isFocused; tempRate = i; })" />
}
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
 - provide 2 private missing fields:
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private bool focus;
private int tempRate = 0;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3. With that done, we can actualy start removing the dependency for the base class, as we are going to handle all the logic here.

---------------------------------------------------------------------------------
Demo 11 > 2 > Replace the base class logic with context class
---------------------------------------------------------------------------------

1. We are going to remove base class and use properties defined within RateComponent.

2. We will remove SetRate method, so we will make CurrentRateInt to invoke EventCallback directly on set.

RateComponent.razor
 - remove @inherits RateComponentBaseWithTask
 - replace Rate parameters -> CurrentRateInt
 - update CurrentRateInt property:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Product.CurrentRate = Rate;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private int CurrentRateInt => Product.CurrentRate ?? 0;
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private int CurrentRateInt
{
	get => Product.CurrentRate ?? 0;
	set => ProductRated.InvokeAsync(value);
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - remove OnParametersSet and SetRate methods
 - update ValueChanged for RateIconComponent:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
ValueChanged="@(async (selectedRate) => { CurrentRateInt = selectedRate; await SetRate(); })"
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
ValueChanged="@((selectedRate) => CurrentRateInt = selectedRate)"
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. Let us clean the code and wrap both private focus and tempRate fields into contex class.

RateContext.cs
 - create a new class:
 
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
namespace Capgemini.Net.Blazor.Components.Demo11.Start
{
    public class RateContext
    {
        public bool IsFocused { get; set; }

        public int FocusedRateValue { get; set; }
    }
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - replace fields with a class:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private bool focus;
private int tempRate = 0;
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private RateContext RateContext = new RateContext();
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace RateIconComponent FocusedValue delegate:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FocusedValue="@tempRate"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
FocusedValue="@(RateContext.FocusedRateValue)"
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace RateIconComponent IsFocused and OnFocusChanged:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
IsFocused="@focus"
OnFocusChanged="@((isFocused) => { focus = isFocused; tempRate = i; })" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
IsFocused="@(RateContext.IsFocused)"
OnFocusChanged="@((isFocused) => { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" />
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
		
3. As we can notice we end up with preety long list of parameters for RateIconComponent. We can reduce that.		
				
---------------------------------------------------------------------------------
Demo 11 > 3 > Simplify the logic for RateIconComponent handled by its parameters and event callbacks
---------------------------------------------------------------------------------

1. Note that Value and ValueChanged is refering to the same variable. We can use binding here


RateComponent.razor
 - replace:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Value="@CurrentRateInt"
...
ValueChanged="@((selectedRate) => CurrentRateInt = selectedRate)"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@bind-Value="@CurrentRateInt"
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. Apply same changes to IsFocused,FocusedValue i OnFocusChanged.

3. In order to do that we have to split OnFocusChanged.

4. onmouseover and onmouseout can use different event callbacks. We will:
 - replace the event callback with 2,
 - create methods for each nmouseover and onmouseout before changing the markup,
 - change the markup


RateIconComponent.razor
 - replace EventCallback:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[Parameter]
public EventCallback<bool> OnFocusChanged { get; set; }
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Parameter]
public EventCallback<int> OnRateIconFocused { get; set; }

[Parameter]
public EventCallback<bool> OnRateIconFocusChanged { get; set; }
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add OnMouseOver and OnMouseOut

03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private async Task OnMouseOver()
{
	await OnRateIconFocused.InvokeAsync(IconRate);
	await OnRateIconFocusChanged.InvokeAsync(true);
}

private async Task OnMouseOut()
{
	await OnRateIconFocusChanged.InvokeAsync(false);
}
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - replace delegates in markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@onmouseover="@(() => OnFocusChanged.InvokeAsync(true))"
@onmouseout="@(() => OnFocusChanged.InvokeAsync(false))"></i>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@onmouseover="@(() => OnMouseOver())"
@onmouseout="@(() => OnMouseOut())"></i>
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

RateComponent.razor
 - update bindings for RateIconComponent:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
OnFocusChanged="@((isFocused) => { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
OnRateIconFocused="@((rateOnFocus) => RateContext.FocusedRateValue = rateOnFocus)"
OnRateIconFocusChanged="@((isFocused) => RateContext.IsFocused = isFocused)"/>
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

5. Now it should be easy to spot which pairs of parameters we can glue together and use data bindings

RateComponent.razor
 - again replace RateIconComponent markup:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FocusedValue="@(RateContext.FocusedRateValue)"
@bind-Value="@CurrentRateInt"
IsFocused="@(RateContext.IsFocused)"
OnRateIconFocused="@((rateOnFocus) => RateContext.FocusedRateValue = rateOnFocus)"
OnRateIconFocusChanged="@((isFocused) => RateContext.IsFocused = isFocused)"/>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@bind-Value="@CurrentRateInt"
@bind-IsFocused="@(RateContext.IsFocused)"
@bind-IsFocused:event="OnRateIconFocusChanged"
@bind-FocusedValue="@(RateContext.FocusedRateValue)"
@bind-FocusedValue:event="OnRateIconFocused"/>
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6. Note that we used bindings with :event
 - by convention event has to be named {PROP}Changed
 - but we can override it
 
7. Now on any of these values change, given property of the RateContext class will be updated and keep in sync.
 
8. But it is still somewhat complicated.

---------------------------------------------------------------------------------
Demo 11 > 4 > Reduce the complexity of the callbacks, wrap all rate icons with a tag to handle on focus events
---------------------------------------------------------------------------------

1. We will simplify the parameters and bindings by:
 - extract on focus behaviour, as it should be common anyway,
 - provide a cascading value for CascadingValue as all of its properties are binded anyway.

RateComponent.razor
 - replace markup:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<div class="icon-rate-container">
	@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
	{
		<RateIconComponent
			Icon="@Icon"
			IconRate="@i"
			@bind-Value="@CurrentRateInt"
			@bind-IsFocused="@(RateContext.IsFocused)"
			@bind-IsFocused:event="OnRateIconFocusChanged"
			@bind-FocusedValue="@(RateContext.FocusedRateValue)"
			@bind-FocusedValue:event="OnRateIconFocused"/>
	}
</div>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<div class="icon-rate-container" @onmouseover="@(() => RateContext.IsFocused = true)" @onmouseout="@(() => RateContext.IsFocused = false)">
	<CascadingValue Value="@RateContext" IsFixed="true">
		@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
		{
			<RateIconComponent Icon="@Icon" IconRate="@i" @bind-Value="@CurrentRateInt"/>
		}
	</CascadingValue>
</div>
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. Why fixed? This is a reference, so the properties wil be updated anyway. And the component would be redraw on each @onmouseover and @onmouseout + @bind-Value="@CurrentRateInt" on click, so we don't need to redraw on those properties change to redraw even more.
 - we have to add CascadingParameter,
 - in rewturn we can remove all bindings for both IsFocused and FocusedRateValue parameters and event callbacks as we can set those properties directly.

RateIconComponent.razor
 - add CascadingParameter:
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[CascadingParameter]
public RateContext Context { get; set; } = default!;
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - remove:
  - FocusedValue
  - IsFocused
  - OnRateIconFocused
  - OnRateIconFocusChanged
 - replace methods:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private bool IsActive => (IsFocused && IconRate <= FocusedValue)
	|| (!IsFocused && IconRate <= Value);

private async Task OnMouseOver()
{
	await OnRateIconFocused.InvokeAsync(IconRate);
	await OnRateIconFocusChanged.InvokeAsync(true);
}

private async Task OnMouseOut()
{
	await OnRateIconFocusChanged.InvokeAsync(false);
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
private bool IsActive => (Context.IsFocused && IconRate <= Context.FocusedRateValue)
	|| (!Context.IsFocused && IconRate <= Value);

private void OnMouseOver()
{
	Context.IsFocused = true;
	Context.FocusedRateValue = IconRate;
}

private void OnMouseOut() => Context.IsFocused = false;
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>