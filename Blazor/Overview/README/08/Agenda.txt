=========================================================================================
=========================================================================================
Demo 08
=========================================================================================
=========================================================================================

- As we provided DefaultAverageRateComponent as renderfragment, we started to see exceptions if AvgRate > MaxRate, so we need to finaly do something with it. 

Demo goal: make impossible for the user to type in invalid values which would crash the app

---------------------------------------------------------------------------------
Demo 08 > 1 > Use validation attributes for the form inputs instead of custom logic in setters
---------------------------------------------------------------------------------

1. This is a solution know sience early days of ASP.NET MVC,

2. We can remove custom setters for properties

RateContext.cs
 - replace class content:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
private int maxRate = 6;
private int avgRate = 3;
private int iconIndex;

public static readonly string[] Icons = {
	"fa-star",
	"fa-grin-stars",
	"fa-angry",
	"fa-sun"
};

public string Icon => Icons[iconIndex];

public int MaxRate
{
	get => maxRate;
	set => maxRate = Math.Max(2, value);
}

public int AvgRate
{
	get => avgRate;
	set => avgRate = Math.Max(1, Math.Min(MaxRate, value));
}

public int IconIndex
{
	get => iconIndex;
	set => iconIndex = value < 0
		? Icons.Length - 1
		: value >= Icons.Length
		? 0
		: value;
}
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
public static readonly string[] Icons = {
	"fa-star",
	"fa-grin-stars",
	"fa-angry",
	"fa-sun"
};

public int MaxRate { get; set; } = 6;

public int AvgRate { get; set; } = 3;

public string Icon { get; set; } = Icons[0];
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. We can simplify some markup as now we are getting icons directly, and we can set them directly, not by index.

ContainerComponent.razor
 - simplify the CapSelect

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<CapSelect Label="Icon" @bind-Value="rateContext.IconIndex" ParseValue="@((option) => RateContext.Icons[option])">
	@for (int i = 0; i < RateContext.Icons.Length; i += 1)
	{
		string icon = RateContext.Icons[i];
		<CapOption Key="@i.ToString()" Value="@i">
			<div class="fa-cap-option">
				<i class="far @icon" /> - <strong>@icon</strong>
			</div>
		</CapOption>
	}
</CapSelect>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<CapSelect Label="Icon" @bind-Value="rateContext.Icon">
	@foreach (string icon in RateContext.Icons)
	{
		<CapOption Key="@icon" Value="@icon">
			<div class="fa-cap-option">
				<i class="far @icon" /> - <strong>@icon</strong>
			</div>
		</CapOption>
	}
</CapSelect>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3. Add validation attributes

RateContext.cs
 - add validation attributes
 - for MaxRate
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Required]
[Range(2, int.MaxValue, ErrorMessage = "The field {0} must be greater than {1}.")]
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - for AvgRate 
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[Required]
[Range(2, int.MaxValue, ErrorMessage = "The field {0} must be greater than {1}.")]
[CompareTo(CompareToAttribute.CompareTo.LESS_THAN_OR_EQUAL, "MaxRate")]
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

4. To be able to use them, EditForm need to:
 - specify the DataAnnotationsValidator component inside,
 - use either ValidationMessage or ValidationSummary to show error messages


ContainerComponent.razor
 - add DataAnnotationsValidator after EditForm

05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<DataAnnotationsValidator />
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add validation message for MaxRate:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<InputNumber @bind-Value="@rateContext.MaxRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<ChildContent>
	<InputNumber @bind-Value="@rateContext.MaxRate" />
</ChildContent>
<ValidationContent>
	<ValidationMessage For="@(() => @rateContext.MaxRate)" />
</ValidationContent>
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add validation message for AvgRate:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<InputNumber @bind-Value="@rateContext.AvgRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<ChildContent>
	<InputNumber @bind-Value="@rateContext.AvgRate" />
</ChildContent>
<ValidationContent>
	<ValidationMessage For="@(() => @rateContext.AvgRate)" />
</ValidationContent>
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


5. Of course showing validation message don't prevent anyone from providing invalid values and as we have deleted the setters, then we can put any value we like.

6. We will deal with that next.

---------------------------------------------------------------------------------
Demo 08 > 2 > Prevent invalid values to be used, provide custom input controls
---------------------------------------------------------------------------------

1. we will provide our custom Input component with a build-in logic for keeping AvgRate valid.

AvgRateInputNumber.razor
 - create a new file:
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@typeparam TValue
@inherits InputNumber<TValue>

<input
    @attributes="AdditionalAttributes"
    class="@CssClass"
    value="@CurrentValue"
    @oninput="@((value) => CurrentValueAsString = value.Value?.ToString())" />
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. @attributes="AdditionalAttributes"

3. CssClass

4. CurrentValue, CurrentValueAsString
 - also note that the default build-in inputs reacts on input's onchange (focus change), not oninput (key type)

5. We will use AdditionalAttributes to provide some specific DOM attributes for Max rate and AvgRate inputs like:
 - type="number"
 - min,
 - max

ContainerComponent.razor
 - replace input component for Max rate:
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<InputNumber @bind-Value="@rateContext.MaxRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<AvgRateInputNumber @bind-Value="@rateContext.MaxRate" type="number" />
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - add min attribute for Max rate
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<AvgRateInputNumber @bind-Value="@rateContext.MaxRate" type="number" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<AvgRateInputNumber
	@bind-Value="@rateContext.MaxRate"
	type="number"
	min="@rateContext.AvgRate" />
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - add min and max attributes for Avg rate, replace component
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<InputNumber @bind-Value="@rateContext.AvgRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<AvgRateInputNumber
	@bind-Value="@rateContext.AvgRate"
	type="number"
	min="2"
	max="@rateContext.MaxRate" />
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

6. Those attributes are standard input's attributes and they will be catched by the AdditionalAttributes and add ass input's parameters by @attributes (attribute splatting).

PROBLEM ON RUN: Thanks to that we would no longer be able to provide invalid values by arrows but we can still type them as in normal type="text" field.

---------------------------------------------------------------------------------
Demo 08 > 3 > Use edit form context to provide cross-field value correctness
---------------------------------------------------------------------------------

1. Restricting both inputs Max to each other's values limits values we can use. We can do better and make inputs update their max value to make other value valid. We want to:
 - remove both Max attributes, leave both Min=2,
 - make MaxRate to increase if AvgRate is increased and MaxRate = AvgRate,
  - make AvgRate to increase if MaxRate is increased and AvgRate = MaxRate,


MaxRateInputNumber.razor
 - create a new file:

01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@typeparam TValue
@inherits RateInputNumberBase<TValue>
@implements IDisposable

<input @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@CurrentValue"
       @oninput="@((value) => CurrentValueAsString = value.Value?.ToString())" />

@code {
    protected override void OnInitialized()
    {
        EditContext.OnFieldChanged += HandleFieldChanged;
        base.OnInitialized();
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
        => OnSelectedFieldChanged<RateContext>(nameof(RateContext.AvgRate), e, UpdateField);

    private void UpdateField(RateContext model, FieldIdentifier fieldIdentifier)
    {
        if (model.MaxRate < model.AvgRate)
        {
            CurrentValueAsString = model.AvgRate.ToString();
            EditContext.Validate();
        }
    }

    public void Dispose()
    {
        EditContext.OnFieldChanged -= HandleFieldChanged;
    }
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

2. EditContext.OnFieldChanged

3. Dispose

4. EditContext.Validate

AvgRateInputNumber.razor
 - add @code {} block:
 
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@code {
    protected override void OnInitialized()
    {
        EditContext.OnFieldChanged += HandleFieldChanged;
        base.OnInitialized();
    }

    private void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
        => OnSelectedFieldChanged<RateContext>(nameof(RateContext.MaxRate), e, UpdateField);

    private void UpdateField(RateContext model, FieldIdentifier fieldIdentifier)
    {
        if (model.MaxRate < model.AvgRate)
        {
            CurrentValueAsString = model.MaxRate.ToString();
            EditContext.Validate();
        }
    }

    public void Dispose()
    {
        EditContext.OnFieldChanged -= HandleFieldChanged;
    }
}
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
  - replace the base class:

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@inherits InputNumber<TValue>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
@inherits RateInputNumberBase<TValue>
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - update Max rate input:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<AvgRateInputNumber 
	@bind-Value="@rateContext.MaxRate"
	type="number"
	min="@rateContext.AvgRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
<MaxRateInputNumber
	@bind-Value="@rateContext.MaxRate"
	type="number"
	min="2" />
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - update Avg rate input:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<AvgRateInputNumber 
	@bind-Value="@rateContext.AvgRate"
	type="number"
	min="2"
	max="@rateContext.MaxRate" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
<AvgRateInputNumber
	@bind-Value="@rateContext.AvgRate"
	type="number"
	min="2" />
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>



3. We can simplify both AvgRateInputNumber and MaxRateInputNumber


AvgRateInputNumber.razor
 - simplify the component changing base class:
 
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@typeparam TValue
@inherits RateInputNumberAbstractBase<TValue>
@implements IDisposable

<input @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@CurrentValue"
       @oninput="@((value) => CurrentValueAsString = value.Value?.ToString())" />

@code {
    protected override void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
        => OnSelectedFieldChanged<RateContext>(nameof(RateContext.MaxRate), e, UpdateField);

    private void UpdateField(RateContext model, FieldIdentifier fieldIdentifier)
    {
        if (model.MaxRate < model.AvgRate)
        {
            CurrentValueAsString = model.MaxRate.ToString();
            EditContext.Validate();
        }
    }
}
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  

MaxRateInputNumber .razor
 - simplify the component changing base class:
 
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  
@typeparam TValue
@inherits RateInputNumberAbstractBase<TValue>
@implements IDisposable

<input @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@CurrentValue"
       @oninput="@((value) => CurrentValueAsString = value.Value?.ToString())" />

@code {
    protected override void HandleFieldChanged(object? sender, FieldChangedEventArgs e)
        => OnSelectedFieldChanged<RateContext>(nameof(RateContext.AvgRate), e, UpdateField);

    private void UpdateField(RateContext model, FieldIdentifier fieldIdentifier)
    {
        if (model.MaxRate < model.AvgRate)
        {
            CurrentValueAsString = model.AvgRate.ToString();
            EditContext.Validate();
        }
    }
}
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  


4. We can take a look at RateInputNumberAbstractBase<TValue> if we have time. It basicaly:
 - take responsibility for disposing event subscriptions,
 - handles subscribing to OnFieldChanged on OnInitialized,
 - providing OnSelectedFieldChanged as previous base class
 
 
5. Noe we can change freely both inputs by arrows, without worrying for max values.

6. But we still can type invalid values. To deal with tha we will prevent input for even accepting the invalid value, before it is stored as input value.

---------------------------------------------------------------------------------
Demo 08 > 4 > Change the behavior of the number inputs to forbids invalid values to be set
---------------------------------------------------------------------------------

RateInputMinMaxNumberAbstractBase.cs
 - create new file:
 
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
using Capgemini.Net.Blazor.Components.Demo;
using Microsoft.AspNetCore.Components;
using System;
using System.Diagnostics.CodeAnalysis;

namespace Capgemini.Net.Blazor.Components.Demo08.Start
{
    public abstract class RateInputMinMaxNumberAbstractBase<TValue> : RateInputNumberAbstractBase<TValue>
    {
        [Parameter]
        public TValue Min { get; set; } = default!;

        [Parameter]
        public TValue Max { get; set; } = default!;

        protected override bool TryParseValueFromString(
            string? value,
            [MaybeNullWhen(false)] out TValue result,
            [NotNullWhen(false)] out string? validationErrorMessage)
        {
            if (base.TryParseValueFromString(value, out result, out validationErrorMessage))
            {
                IComparable<TValue>? selfValueComparer = result as IComparable<TValue>;

                if (selfValueComparer is not null)
                {
                    if (Min is not null && selfValueComparer.CompareTo(Min) < 0)
                    {
                        result = Min;
                    }

                    if (Max is not null && selfValueComparer.CompareTo(Max) > 0)
                    {
                        result = Max;
                    }
                }

                return true;
            }

            return false;
        }
    }
}
01 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>  

1. TryParseValueFromString is run before the value is set to the CurrentValue, after a user changes the input's value (but before it made its way to the Value)

MaxRateInputNumber.razor
 - replace base class:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@inherits RateInputNumberAbstractBase<TValue>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@inherits RateInputMinMaxNumberAbstractBase<TValue>
02 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AvgRateInputNumber.razor
 - replace base class:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
@inherits RateInputNumberAbstractBase<TValue>
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@inherits RateInputMinMaxNumberAbstractBase<TValue>
03 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

ContainerComponent.razor
 - update markup to use custom Min ands Max for Max rate:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<MaxRateInputNumber 
	@bind-Value="@rateContext.MaxRate"
	type="number"
	min="2" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<MaxRateInputNumber
	@bind-Value="@rateContext.MaxRate"
	Min="@rateContext.AvgRate"
	Max="@int.MaxValue"
	type="number" />
04 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 - update markup to use custom Min ands Max for Avg  rate:
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<AvgRateInputNumber 
	@bind-Value="@rateContext.AvgRate"
	type="number"
	min="2" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
<AvgRateInputNumber
	@bind-Value="@rateContext.AvgRate"
	Min="2"
	Max="@rateContext.MaxRate"
	type="number" />
05 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


2. In order it to work we have to change the value of the input from value="@CurrentValue" to CurrentValueAsString in both MaxRateInputNumber and AvgRateInputNumber (to make the value go through the whole process and our overwriten method).


MaxRateInputNumber.razor
 - update binding and binding event
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
value="@CurrentValue"
@oninput="@((value) => CurrentValueAsString = value.Value?.ToString())" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@bind-value="@CurrentValueAsString"
@bind-value:event="oninput" />
06 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

AvgRateInputNumber.razor
 - update binding and binding event
 
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
value="@CurrentValue"
@oninput="@((value) => CurrentValueAsString = value.Value?.ToString())" />
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
@bind-value="@CurrentValueAsString"
@bind-value:event="oninput" />
07 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

3. After that edits:
 - we are no longer to even type the invalid value,
 - we cannot use arrows to set values beyond {min,...,max}
 - so basicaly we cannot force inputs to show validation errors, problem solved.