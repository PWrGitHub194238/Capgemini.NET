<Title Value=".NET Community Blazor Introduction | Demo 11"></Title>

@if (Context is not null)
{
    <CascadingValue Name="Id" Value="@Id">
        <FullTileContainer ChecklistContext="@Context">
            <DemoEndPoint>
                <Capgemini.Net.Blazor.Components.Demo11.End.WrapperComponent />
            </DemoEndPoint>
            <DemoStartPoint>
                <Capgemini.Net.Blazor.Components.Demo11.Start.WrapperComponent />
            </DemoStartPoint>
        </FullTileContainer>
    </CascadingValue>
}

@code {
    internal static readonly RenderFragment PointContext1 = __builder =>
    {
    <p>
        Add new Razor component named <mark>RateIconComponent</mark>:
    </p>

    <pre>
    <code class="language-csharp line-numbers">
&lt;i class="@@(IsActive ? ActiveCss : InActiveCss) @@(Icon) cursor-pointer"
    alt="@@IconRate"
    @@onclick="@@(() =&gt; ValueChanged.InvokeAsync(IconRate))"
    @@onmouseover="@@(() =&gt; OnFocusChanged.InvokeAsync(true))"
    @@onmouseout="@@(() =&gt; OnFocusChanged.InvokeAsync(false))"&gt;&lt;/i&gt;

@@code {
    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public int IconRate { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public int FocusedValue { get; set; }

    [Parameter]
    public EventCallback&lt;int&gt; ValueChanged { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public EventCallback&lt;bool&gt; OnFocusChanged { get; set; }

    [Parameter]
    public string ActiveCss { get; set; } = "fas";

    [Parameter]
    public string InActiveCss { get; set; } = "far";

    private bool IsActive =&gt; (IsFocused && IconRate &lt;= FocusedValue)
        || (!IsFocused && IconRate &lt;= Value);
}
        </code>
    </pre>

    <p>
        The markup and Blazor event handlers used for the component are the same as for the original markup inside the <mark>RateComponent</mark> component:
    </p>

    <pre data-line="9-12">
    <code class="language-csharp line-numbers">
@@inherits RateComponentBaseWithTask

@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@foreach (int i in Enumerable.Range(Product.MinRate - 1, Product.MaxRate - Product.MinRate + 1))
        {
            &lt;i class="@@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) @@(Icon) cursor-pointer"
               @@onclick="SetRate"
               @@onmouseover="@@(() =&gt; ShowRate(i))"
               @@onmouseout=RevertRate&gt;&lt;/i&gt;
        }
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- ... --&gt;

@@code {
	// ...
}
        </code>
    </pre>

    <p>
        <mark>RateIconComponent</mark> does not inherits from the <mark>RateComponentBaseWithTask</mark> class which holds the context variables for the above code to work:
    </p>

    <ul>
        <li>
            <mark>SetRate</mark> method sets the current rate of the product based on whatever icon was clicked while being focused,
        </li>
        <li>
            <mark>ShowRate(i)</mark> sets the temporary rate (<mark>private int tempRate</mark>) based on the icon's index <mark>i</mark>. Once <mark>SetRate</mark>
            is invoked, <mark>tempRate</mark> value is assigned to the selected rate (can be get by the public <mark>Rate</mark> property).
        </li>
    </ul>

    <p>
        <mark>RateIconComponent</mark> needs to notify the <mark>RateComponent</mark> whenever it is focused to simulate the <mark>ShowRate(i)</mark>.
        <mark>RateIconComponent</mark> use <mark>EventCallback&lt;bool&gt; OnFocusChanged</mark> parameter to provide that and it is called on both <mark>@@onmouseover</mark>
        and <mark>@@onmouseout</mark> (to also notify other <mark>RateIconComponent</mark> components about focus state):
    </p>

    <ul>
        <li>
            <mark>@@onmouseover="@@(() =&gt; OnFocusChanged.InvokeAsync(true))"</mark>
        </li>
        <li>
            <mark>@@onmouseout="@@(() =&gt; OnFocusChanged.InvokeAsync(false))"</mark>
        </li>
    </ul>

    <p>
        <strong>Note:</strong> <mark>RateIconComponent</mark> components needs to know the shared focus state as they either:
    </p>

    <ul>
        <li>
            mark their icons as active if any other icon with greater <mark>IconRate</mark> is focused (despite the actual rate selected),
        </li>
        <li>
            mark their icon as active if their own <mark>IconRate</mark> are smaller or equal than the selected rate (if non of the rate icons are focused).
        </li>
    </ul>

    <p>
        Use the component to replace the <mark>&lt;i&gt;</mark> tag used inside the <mark>RateComponent</mark> component:
    </p>

    <pre data-line="7, 9-16, 76,77">
    <code class="language-csharp line-numbers">
@@inherits RateComponentBaseWithTask

@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
        {
            &lt;RateIconComponent
                Icon="@@Icon"
                IconRate="@@i" 
                Value="@@Rate"
                FocusedValue="@@tempRate"
                ValueChanged="@@(async (selectedRate) =&gt; { Rate = selectedRate; await SetRate(); })"
                IsFocused="@@focus"
                OnFocusChanged="@@((isFocused) =&gt; { focus = isFocused; tempRate = i; })" /&gt;
        }
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="current-rate-container"&gt;
    @@CurrentRate(CurrentRateContext)
&lt;/div&gt;

&lt;div class="average-rate-container"&gt;
    @@AvgRate(AverageRateContext)
&lt;/div&gt;

&lt;div class="max-rate-container"&gt;
    @@MaxRate(Product.MaxRate)
&lt;/div&gt;

@@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment&lt;AverageRateContext&gt; CurrentRate { get; set; } = context =&gt; __builder =&gt;
    {
    @@if (@@context.AvgRate &gt; 0)
        {
            &lt;DefaultAverageRateComponent
                MinRate="@@context.MinRate"
                AvgRate="@@context.AvgRate"
                MaxRate="@@context.MaxRate" /&gt;
        }
        else
        {
            @@: ---
        }
    };

    [Parameter]
    public RenderFragment&lt;AverageRateContext&gt; AvgRate { get; set; } = context =&gt; __builder =&gt;
    {
        &lt;DefaultAverageRateComponent 
            MinRate="@@context.MinRate"
            AvgRate="@@context.AvgRate"
            MaxRate="@@context.MaxRate" /&gt;
    };

    [Parameter]
    public RenderFragment&lt;int&gt; MaxRate { get; set; } = context =&gt; __builder =&gt;
    {
        @@context
    };

    [Parameter]
    public EventCallback&lt;int&gt; ProductRated { get; set; } = default!;

    private int CurrentRateInt =&gt; Product.CurrentRate ?? 0;

    private bool focus;
    private int tempRate = 0;

    private AverageRateContext CurrentRateContext =&gt; new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = (decimal)CurrentRateInt,
        MaxRate = Product.MaxRate,
    };

    private AverageRateContext AverageRateContext =&gt; new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;AverageRateContext&gt;&gt;(nameof(CurrentRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(CurrentRate));
        }

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;AverageRateContext&gt;&gt;(nameof(AvgRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(AvgRate));
        }

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;int&gt;&gt;(nameof(MaxRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(MaxRate));
        }
    }

    protected override void OnParametersSet()
    {
        Rate = CurrentRateInt;
    }

    protected override async Task SetRate()
    {
        await base.SetRate();
        await ProductRated.InvokeAsync(Rate);
    }
}
        </code>
    </pre>

    <p>
        Each of the <mark>RateIconComponent</mark> components receives an <mark>Icon</mark> and <mark>IconRate</mark> (based on loop index).
    </p>

    <p>
        <mark>Value</mark> parameter and <mark>ValueChanged</mark> event callback is used to react on rate icon click. If clicked, <mark>ValueChanged</mark>
        is called providing the selected rate, <mark>Rate</mark> (base class property) is updated and the method to notify the <mark>ContainerComponent</mark> about the change is called.
    </p>

    <p>
        On any mouse in/out event each of the generated <mark>RateIconComponent</mark> components call <mark>OnFocusChanged</mark>. <mark>OnFocusChanged</mark> updates both shared <mark>focus</mark> (line <mark>76</mark>)
        and <mark>tempRate</mark> (line <mark>77</mark>) fields to provide their updated values for <mark>IsFocused</mark> and <mark>FocusedValue</mark> parameters of each of the <mark>RateIconComponent</mark> components.
    </p>
    };

    internal static readonly RenderFragment PointContext2 = __builder =>
    {
    <p>
        Remove the <mark>RateComponentBaseWithTask</mark> inheritance from the <mark>RateComponent</mark> component.
    </p>

    <ul>
        <li>
            Remove the reference to the <mark>RateComponentBaseWithTask.Rate</mark> property. Use the <mark>CurrentRateInt</mark> of the <mark>RateComponent</mark> instead.
        </li>
        <li>
            Add the setter for the <mark>CurrentRateInt</mark> as the <mark>ValueChanged</mark> even callback is setting the value of the replaced property (<mark>ValueChanged="@@(async (selectedRate) =&gt; { Rate = selectedRate; await SetRate(); })"</mark>) and currently it is read-only (<mark>private int CurrentRateInt =&gt; Product.CurrentRate ?? 0;</mark>).
            The logic from the <mark>SetRate</mark> method can be used:

            <pre data-line="4">
            <code class="language-csharp line-numbers">
private int CurrentRateInt
{
	get =&gt; Product.CurrentRate ?? 0;
	set =&gt; ProductRated.InvokeAsync(value);
}
                    </code>
                </pre>
        </li>
        <li>
            Remove remaining methods that uses the removed <mark>base</mark> class:
            <ul>
                <li>
                    <mark>OnParametersSet</mark>
                </li>
                <li>
                    <mark>SetRate</mark>
                </li>
            </ul>
        </li>
        <li>
            Remove the <mark>SetRate</mark> usage from the <mark>ValueChanged</mark> lambda expression.
        </li>
    </ul>

    <pre data-line="10, 11, 12, 13, 14, 72-76, 78, 79">
    <code class="language-csharp line-numbers">
@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
        {
            &lt;RateIconComponent
                Icon="@@Icon"
                IconRate="@@i" 
                Value="@@CurrentRateInt"
                FocusedValue="@@tempRate"
                ValueChanged="@@((selectedRate) =&gt; CurrentRateInt = selectedRate)"
                IsFocused="@@focus"
                OnFocusChanged="@@((isFocused) =&gt; { focus = isFocused; tempRate = i; })" /&gt;
        }
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="current-rate-container"&gt;
    @@CurrentRate(CurrentRateContext)
&lt;/div&gt;

&lt;div class="average-rate-container"&gt;
    @@AvgRate(AverageRateContext)
&lt;/div&gt;

&lt;div class="max-rate-container"&gt;
    @@MaxRate(Product.MaxRate)
&lt;/div&gt;

@@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment&lt;AverageRateContext&gt; CurrentRate { get; set; } = context =&gt; __builder =&gt;
    {
    @@if (@@context.AvgRate &gt; 0)
        {
            &lt;DefaultAverageRateComponent
                MinRate="@@context.MinRate"
                AvgRate="@@context.AvgRate"
                MaxRate="@@context.MaxRate" /&gt;
        }
        else
        {
            @@: ---
        }
    };

    [Parameter]
    public RenderFragment&lt;AverageRateContext&gt; AvgRate { get; set; } = context =&gt; __builder =&gt;
    {
        &lt;DefaultAverageRateComponent 
            MinRate="@@context.MinRate"
            AvgRate="@@context.AvgRate"
            MaxRate="@@context.MaxRate" /&gt;
    };

    [Parameter]
    public RenderFragment&lt;int&gt; MaxRate { get; set; } = context =&gt; __builder =&gt;
    {
        @@context
    };

    [Parameter]
    public EventCallback&lt;int&gt; ProductRated { get; set; } = default!;

    private int CurrentRateInt
    {
        get =&gt; Product.CurrentRate ?? 0;
        set =&gt; ProductRated.InvokeAsync(value);
    }

    private bool focus;
    private int tempRate = 0;

    private AverageRateContext CurrentRateContext =&gt; new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = (decimal)CurrentRateInt,
        MaxRate = Product.MaxRate,
    };

    private AverageRateContext AverageRateContext =&gt; new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;AverageRateContext&gt;&gt;(nameof(CurrentRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(CurrentRate));
        }

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;AverageRateContext&gt;&gt;(nameof(AvgRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(AvgRate));
        }

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;int&gt;&gt;(nameof(MaxRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(MaxRate));
        }
    }
}
            </code>
        </pre>

    <p>
        <strong>Note:</strong> lambda expression for <mark>ValueChanged</mark> event is no longer asynchronous.
    </p>

    <p>
        <strong>Note:</strong> with <mark>CurrentRateInt</mark> setter calling <mark>EventCVallback&lt;int&gt;</mark> directly and passing the value to be set (<mark>ProductRated.InvokeAsync(value)</mark>)
        the <mark>RateComponent</mark> is no longer used to set the rate of the product (as <mark>OnParametersSet</mark> did but is was removed) - it is just passing the value to its parent component to update the product with the <strong>API</strong> call - <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0#bind-across-more-than-two-components">read more</a>.
    </p>

    <p>
        Replace the <mark>focus</mark> and <mark>tempRate</mark> fields with the <mark>RateContext</mark> class:
    </p>

    <pre>
    <code class="language-csharp line-numbers">
namespace Capgemini.Net.Blazor.Components.Demo11.End
{
    public class RateContext
    {
        public bool IsFocused { get; set; }

        public int FocusedRateValue { get; set; }
    }
}
            </code>
        </pre>

    <pre data-line="11, 14, 40">
    <code class="language-csharp line-numbers">
@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
        {
            &lt;RateIconComponent
                Icon="@@Icon"
                IconRate="@@i" 
                Value="@@CurrentRateInt"
                FocusedValue="@@(RateContext.FocusedRateValue)"
                ValueChanged="@@((selectedRate) =&gt; CurrentRateInt = selectedRate)"
                IsFocused="@@(RateContext.IsFocused)"
                OnFocusChanged="@@((isFocused) =&gt; { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" /&gt;
        }
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="current-rate-container"&gt;
    @@CurrentRate(CurrentRateContext)
&lt;/div&gt;

&lt;div class="average-rate-container"&gt;
    @@AvgRate(AverageRateContext)
&lt;/div&gt;

&lt;div class="max-rate-container"&gt;
    @@MaxRate(Product.MaxRate)
&lt;/div&gt;

@@code {
	// ...

    private int CurrentRateInt
    {
        get =&gt; Product.CurrentRate ?? 0;
        set =&gt; ProductRated.InvokeAsync(value);
    }

    private RateContext RateContext = new RateContext();

	// ...
}
            </code>
        </pre>
    };

    internal static readonly RenderFragment PointContext3 = __builder =>
    {
    <p>
        As the <mark>RateIconComponent</mark> is using its <mark>Value</mark> parameter and <mark>ValueChanged</mark> event callback both to get/set the same <mark>CurrentRateInt</mark> parameter, it can be simplified
        - a <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0">data binding</a> Blazor mechanism can be used.
    </p>

    <p>
        Replace the <mark>RateIconComponent</mark> markup in the <mark>RateComponent</mark> component:
    </p>

    <pre data-line="10">
    <code class="language-csharp line-numbers">
@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
        {
            &lt;RateIconComponent
                Icon="@@Icon"
                IconRate="@@i" 
                @@bind-Value="@@CurrentRateInt"
                FocusedValue="@@(RateContext.FocusedRateValue)"
                IsFocused="@@(RateContext.IsFocused)"
                OnFocusChanged="@@((isFocused) =&gt; { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" /&gt;
        }
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- ... --&gt;
            </code>
        </pre>

    <p>
        Data binding allows the binded value to be updated to the value that the component pushes by the <mark>ValueChanged</mark> parameter of the <mark>EventCallback</mark> type.
        To be able to use a custom data binding syntax for a component, it has to:
    </p>

    <ul>
        <li>
            define the parameter of a <mark>TValue</mark> type to enable the component to receive a value from the field or property (e.g. <mark>Value="@@CurrentRateInt"</mark>):

            <pre>
            <code class="language-csharp line-numbers">
&lt;!-- ... --&gt;

[Parameter]
public int Value { get; set; }

&lt;!-- ... --&gt;
                    </code>
                </pre>
        </li>
        <li>
            define the parameter of the type <mark>EventCallback&lt;TValue&gt;</mark> named by the input parameter with a <mark>Changed</mark> suffix:

            <pre>
            <code class="language-csharp line-numbers">
&lt;!-- ... --&gt;

    [Parameter]
    public EventCallback&lt;int&gt; ValueChanged { get; set; }

&lt;!-- ... --&gt;
                    </code>
                </pre>
        </li>
    </ul>

    <p>
        <strong>Note:</strong> generic type for the <mark>ValueChanged</mark> parameter has to be the same as the <mark>Value</mark> parameter is - <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0#binding-with-component-parameters">read more</a>.
    </p>

    <p>
        To bind across more than two components, components is chain can invoke another <mark>EventCallback</mark> with another binded property setter (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0#bind-across-more-than-two-components">read more</a>):
    </p>

    <pre data-line="6">
    <code class="language-csharp line-numbers">
&lt;!-- ... --&gt;

    &lt;RateIconComponent
        Icon="@@Icon"
        IconRate="@@i" 
        @@bind-Value="@@CurrentRateInt"
        FocusedValue="@@(RateContext.FocusedRateValue)"
        IsFocused="@@(RateContext.IsFocused)"
        OnFocusChanged="@@((isFocused) =&gt; { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })" /&gt;

&lt;!-- ... --&gt;
                    </code>
                </pre>

    <pre data-line="3, 6">
    <code class="language-csharp line-numbers">
// ...

private int CurrentRateInt
{
	get =&gt; Product.CurrentRate ?? 0;
	set =&gt; ProductRated.InvokeAsync(value);
}

// ...
            </code>
        </pre>

    <p>
        <strong>Note:</strong> binded value can be displayed with the custom format by using the <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0#format-strings">format</a> directive attribute.
    </p>

    <p>
        <strong>Note:</strong> <mark>CascadingValue</mark> with a mutable object can be used to allow the component to work with the cascading object in both ways as well.
    </p>

    <p>
        In order to introduce data bindings for
    </p>

    <ul>
        <li>
            <mark>FocusedRateValue</mark> property of the <mark>RateContext</mark> object (<mark>FocusedValue="@@(RateContext.FocusedRateValue)"</mark>),
        </li>
        <li>
            <mark>IsFocused</mark> property of the <mark>RateContext</mark> object (<mark>IsFocused="@@(RateContext.IsFocused)"</mark>)
        </li>
    </ul>

    <p>
        <mark>OnFocusChanged</mark> event callback has to be split as it is used to update both properties in a single call (<mark>OnFocusChanged="@@((isFocused) => { RateContext.IsFocused = isFocused; RateContext.FocusedRateValue = i; })"</mark>).
        In fact the <mark>RateIconComponent</mark> is invoking that event callback for two different reasons and with different values to be returned:
    </p>

    <ul>
        <li>
            <mark>true</mark> if the <mark>@@onmouseover</mark> event for a rate icon is triggered to notify the parent component to change the shared <mark>RateContext.IsFocused</mark> to <mark>true</mark> (<mark>@@onmouseover="@@(() => OnFocusChanged.InvokeAsync(true))"</mark>),
        </li>
        <li>
            <mark>false</mark> if the <mark>@@onmouseout</mark> event is triggered (<mark>@@onmouseout="@@(() => OnFocusChanged.InvokeAsync(false))"</mark>) which will set the <mark>RateContext.IsFocused</mark> to <mark>false</mark>.
        </li>
    </ul>

    <p>
        Update the <mark>RateIconComponent</mark> markup to invoke different event callbacks on those events and the way the <mark>RateComponent</mark> is using them:
    </p>

    <pre data-line="4, 5, 26-27, 29-30, 41-45, 47-50">
    <code class="language-csharp line-numbers">
&lt;i class="@@(IsActive ? ActiveCss : InActiveCss) @@(Icon) cursor-pointer"
    alt="@@IconRate"
    @@onclick="@@(() =&gt; ValueChanged.InvokeAsync(IconRate))"
    @@onmouseover="@@(() =&gt; OnMouseOver())"
    @@onmouseout="@@(() =&gt; OnMouseOut())"&gt;&lt;/i&gt;

@@code {
    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public int IconRate { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public int FocusedValue { get; set; }

    [Parameter]
    public EventCallback&lt;int&gt; ValueChanged { get; set; }

    [Parameter]
    public bool IsFocused { get; set; }

    [Parameter]
    public EventCallback&lt;int&gt; OnRateIconFocused { get; set; }

    [Parameter]
    public EventCallback&lt;bool&gt; OnRateIconFocusChanged { get; set; }

    [Parameter]
    public string ActiveCss { get; set; } = "fas";

    [Parameter]
    public string InActiveCss { get; set; } = "far";

    private bool IsActive =&gt; (IsFocused && IconRate &lt;= FocusedValue)
        || (!IsFocused && IconRate &lt;= Value);

    private async Task OnMouseOver()
    {
        await OnRateIconFocused.InvokeAsync(IconRate);
        await OnRateIconFocusChanged.InvokeAsync(true);
    }

    private async Task OnMouseOut()
    {
        await OnRateIconFocusChanged.InvokeAsync(false);
    }
}
            </code>
        </pre>

    <pre data-line="9-10">
    <code class="language-csharp line-numbers">
&lt;!-- ... --&gt;

&lt;RateIconComponent
	Icon="@@Icon"
	IconRate="@@i" 
	@@bind-Value="@@CurrentRateInt"
	FocusedValue="@@(RateContext.FocusedRateValue)"
	IsFocused="@@(RateContext.IsFocused)"
	OnRateIconFocused="@@((rateOnFocus) =&gt; RateContext.FocusedRateValue = rateOnFocus)"
	OnRateIconFocusChanged="@@((isFocused) =&gt; RateContext.IsFocused = isFocused)"/&gt;

&lt;!-- ... --&gt;
            </code>
        </pre>

    <p>
        Now both pairs of parameters can be simplified with the data binding:
    </p>

    <ul>
        <li>
            <mark>FocusedValue</mark> parameter which is receiving a value from the <mark>@@(RateContext.FocusedRateValue)</mark> and <mark>OnRateIconFocused</mark> event callback which is setting it,
        </li>
        <li>
            <mark>IsFocused</mark> parameter which is receiving a value from the <mark>@@(RateContext.IsFocused)</mark> and <mark>OnRateIconFocusChanged</mark> event callback which is setting it.
        </li>
    </ul>

    <p>
        Replace the content of the <mark>RateComponent.razor</mark> file as follows:
    </p>

    <pre data-line="11-14">
    <code class="language-csharp line-numbers">
@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
        {
            &lt;RateIconComponent
                Icon="@@Icon"
                IconRate="@@i" 
                @@bind-Value="@@CurrentRateInt"
                @@bind-IsFocused="@@(RateContext.IsFocused)"
                @@bind-IsFocused:event="OnRateIconFocusChanged"
                @@bind-FocusedValue="@@(RateContext.FocusedRateValue)"
                @@bind-FocusedValue:event="OnRateIconFocused"/&gt;
        }
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class="current-rate-container"&gt;
    @@CurrentRate(CurrentRateContext)
&lt;/div&gt;

&lt;div class="average-rate-container"&gt;
    @@AvgRate(AverageRateContext)
&lt;/div&gt;

&lt;div class="max-rate-container"&gt;
    @@MaxRate(Product.MaxRate)
&lt;/div&gt;

@@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public RenderFragment&lt;AverageRateContext&gt; CurrentRate { get; set; } = context =&gt; __builder =&gt;
    {
    @@if (@@context.AvgRate &gt; 0)
        {
            &lt;DefaultAverageRateComponent
                MinRate="@@context.MinRate"
                AvgRate="@@context.AvgRate"
                MaxRate="@@context.MaxRate" /&gt;
        }
        else
        {
            @@: ---
        }
    };

    [Parameter]
    public RenderFragment&lt;AverageRateContext&gt; AvgRate { get; set; } = context =&gt; __builder =&gt;
    {
        &lt;DefaultAverageRateComponent 
            MinRate="@@context.MinRate"
            AvgRate="@@context.AvgRate"
            MaxRate="@@context.MaxRate" /&gt;
    };

    [Parameter]
    public RenderFragment&lt;int&gt; MaxRate { get; set; } = context =&gt; __builder =&gt;
    {
        @@context
    };

    [Parameter]
    public EventCallback&lt;int&gt; ProductRated { get; set; } = default!;

    private int CurrentRateInt
    {
        get =&gt; Product.CurrentRate ?? 0;
        set =&gt; ProductRated.InvokeAsync(value);
    }

    private RateContext RateContext = new RateContext();

    private AverageRateContext CurrentRateContext =&gt; new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = (decimal)CurrentRateInt,
        MaxRate = Product.MaxRate,
    };

    private AverageRateContext AverageRateContext =&gt; new AverageRateContext()
    {
        MinRate = Product.MinRate,
        AvgRate = Product.AverageRate,
        MaxRate = Product.MaxRate,
    };

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;AverageRateContext&gt;&gt;(nameof(CurrentRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(CurrentRate));
        }

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;AverageRateContext&gt;&gt;(nameof(AvgRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(AvgRate));
        }

        if (parameters.GetValueOrDefault&lt;RenderFragment&lt;int&gt;&gt;(nameof(MaxRate)) is null)
        {
            Logger.LogInformation(Properties.Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(MaxRate));
        }
    }
}
            </code>
        </pre>

    <p>
        <strong>Note:</strong> by convention, to use the custom data binding syntax in a form of <mark>@@bind-{PROPERTY OR FIELD}</mark> by default the parameter of type <mark>EventCallback&lt;TValue&gt;</mark>
        has to have the name of <mark>{PROPERTY OR FIELD}Changed</mark>. In order to use a differently named event callback an <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding?view=aspnetcore-5.0">event</a>
        directive attribute can be used with a name of the event callback to be used as a value.
    </p>
    };

    internal static readonly RenderFragment PointContext4 = __builder =>
    {
    <p>
        Managing the state of the <mark>RateContext</mark> object never was a responsibility of the <mark>RateIconComponent</mark> component.
        Introduction of the <mark>RateIconComponent</mark> makes it possible to take the advantage of the fact that each component is able to hold its own state (like the rate
        each of the given icons represent without a need to share that data within a base class of the <mark>ContainerComponent</mark>) but also force each of those components
        to be involved in such a tasks as:
    </p>

    <ul>
        <li>
            notifying the parent component that the user hover/blue the icon to make the parent component to notify all other icons about it (in order to make them change the way they are calculating their inner state - should the icons they are displaying be active or not),
        </li>
        <li>
            notifying the parent component that the user clicks on an icon to make the parent component do the same with the <mark>RateContext.FocusedRateValue</mark> property as with <mark>RateContext.IsFocused</mark>.
        </li>
    </ul>

    <p>
        Both properties should be related to the <mark>RateComponent</mark> and be only shared with all the <mark>RateIconComponent</mark> components. <mark>CascadingValue</mark> component
        can be used to provide that kind of behavior.
    </p>

    <p>
        Change the markup of the <mark>RateComponent.razor</mark> file to remove data bindings, wrap all the icons with a custom <mark>@@onmouseover</mark> and <mark>@@onmouseout</mark> events
        and provide a <mark>RateContext</mark> object for the icons:
    </p>

    <pre data-line="4-5, 8, 10-11">
    <code class="language-csharp line-numbers">
@@inject ILogger&lt;RateComponent&gt; Logger

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container" <mark>@@onmouseover="@@(() =&gt; RateContext.IsFocused = true)" @@onmouseout="@@(() =&gt; RateContext.IsFocused = false)"</mark>&gt;
        &lt;CascadingValue Value="@@RateContext" IsFixed="true"&gt;
            @@foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate - Product.MinRate + 1))
            {
                &lt;RateIconComponent Icon="@@Icon" IconRate="@@i" @@bind-Value="@@CurrentRateInt"/&gt;
            }
        &lt;/CascadingValue&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;!-- ... --&gt;
            </code>
        </pre>

    <p>
        That way most of the settings for the <mark>RateIconComponent</mark> can be simplified and much less interaction introduced:
    </p>

    <pre data-line="8-9, 29-30, 34-35, 38">
    <code class="language-csharp line-numbers">
&lt;i class="@@(IsActive ? ActiveCss : InActiveCss) @@(Icon) cursor-pointer"
    alt="@@IconRate"
    @@onclick="@@(() =&gt; ValueChanged.InvokeAsync(IconRate))"
    @@onmouseover="@@(() =&gt; OnMouseOver())"
    @@onmouseout="@@(() =&gt; OnMouseOut())"&gt;&lt;/i&gt;

@@code {
    [CascadingParameter]
    public RateContext Context { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public int IconRate { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback&lt;int&gt; ValueChanged { get; set; }

    [Parameter]
    public string ActiveCss { get; set; } = "fas";

    [Parameter]
    public string InActiveCss { get; set; } = "far";

    private bool IsActive =&gt; (Context.IsFocused && IconRate &lt;= Context.FocusedRateValue)
        || (!Context.IsFocused && IconRate &lt;= Value);

    private void OnMouseOver()
    {
        Context.IsFocused = true;
        Context.FocusedRateValue = IconRate;
    }

    private void OnMouseOut() =&gt; Context.IsFocused = false;
}
            </code>
        </pre>

    <p>
        <strong>Note: </strong> <mark>IsFixed="true"</mark> is used for the <mark>CascadingValue</mark> providing the <mark>RateContext</mark> object which renders the <mark>CascadingValue</mark>
        performance the same as the ordinary <mark>Parameter</mark> (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/webassembly-performance-best-practices?view=aspnetcore-5.0#ensure-cascading-parameters-are-fixed">read more</a>).
        <mark>IsFixed="true"</mark> can be used for both primitive and complex types but fixed primitive types cannot be changed (as they are passed as values, not a reference).
    </p>
    };
}