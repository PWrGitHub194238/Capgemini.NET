<Title Value=".NET Community Blazor Introduction | Demo 1"></Title>
<Link href="_content/Capgemini.Net.Blazor.Components.Demo1/css/styles.css" rel="stylesheet" />

@if (Context is not null)
{
    <FullTileContainer ChecklistContext="@Context">
        <DemoEndPoint>
            <Capgemini.Net.Blazor.Components.Demo1.End.RateComponent />
        </DemoEndPoint>
        <DemoStartPoint>
            <Capgemini.Net.Blazor.Components.Demo1.Start.RateComponent />
        </DemoStartPoint>
    </FullTileContainer>
}

@code {
    internal static readonly RenderFragment PointContext1 = __builder =>
        {
        <p>Open a file <mark>./End/RateComponent.razor</mark> Razor component. Its content should resemble snippet that is shown below:</p>

        <pre>
        <code class="language-csharp line-numbers">
&lt;h3&gt;RateComponent&lt;/h3&gt;

@@code {

}
            </code>
        </pre>

        <p>Open a file <mark>./Start/RateComponent.razor</mark> Razor component and copy over the entire HTML markup it contains:</p>

        <pre>
        <code class="language-csharp line-numbers">
@@for (int i = 0; i &lt; 5; i += 1)
{
    &lt;i class="rate-icon far fa-star cursor-pointer"
        onclick="CapgeminiNetBlazorComponents.setRate()"
        onmouseover="@@("CapgeminiNetBlazorComponents.showRate(" + i + ")")"
        onmouseout="CapgeminiNetBlazorComponents.revertRate()"&gt;&lt;/i&gt;
}

@@code {

}
            </code>
        </pre>

        <p>
            Observe that by running the application, navigating to <mark><a href="./demo1">./demo1</a></mark> and moving a mouse over start component,
            component on the right will be changed instead due to <strong>JavaScript</strong> is bounded to both of them. See the code below and observe that after coping over the same component twice,
            line <mark>2</mark> will return not <mark>5</mark> elements but <mark>10</mark>.
        </p>

        <pre data-line="2">
        <code class="language-ts line-numbers">
public updateRateIconActiveState() {
    const rateIcons = document.getElementsByClassName('rate-icon');

    for (let i: number = 0; i &lt; rateIcons.length; i += 1) {
        const rateIcon = rateIcons.item(i);

        if (this.isActive(i)) {
            rateIcon.classList.add(Demo1.ACTIVE_STYLE);
            rateIcon.classList.remove(Demo1.INACTIVE_STYLE);
        } else {
            rateIcon.classList.remove(Demo1.ACTIVE_STYLE);
            rateIcon.classList.add(Demo1.INACTIVE_STYLE);
        }
    }
}
            </code>
        </pre>

        <p>
            One solution to this problem is to introduce separate namespaces for <strong>TypeScript</strong> classes
            but that would lead to unnecessary code duplication.
        </p>
        };

    internal static readonly RenderFragment PointContext2 = __builder =>
    {
    <p>In order to migrate the <strong>TypeScript</strong> logic that <mark>./wwwroot/js/main.ts</mark> file contains:</p>

    <ul>
        <li>
            copy entire content of the <mark>Capgemini.Net.Blazor.Components.Demo1</mark> class,
        </li>
        <li>
            paste it into <mark>./End/RateComponent.razor</mark> file wrapping it with <mark>@@mark {</mark> and <mark>}</mark> syntax
            which will mark a given mark as a <a href="https://docs.microsoft.com/pl-pl/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#no-locrazor-mark-blocks">Razor mark block</a>
            (in <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0">Razor components</a>,
            use <mark>@@mark</mark> over <mark>@@functions</mark> to add <strong>C#</strong> members - <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0">read more</a>),
        </li>
        <li>
            remove class constructor - Razor components didn't allow to have constructor
            as it will be <a href="https://docs.microsoft.com/pl-pl/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#inspect-the-no-locrazor-c-class-generated-for-a-view">auto-generated</a>,
        </li>
        <li>
            remove <mark>updateRateIconActiveState</mark> function - it's logic will be implemented by Razor syntax,
        </li>
        <li>
            replace <strong>TypeScript</strong> variable types syntax with <strong>C#</strong> syntax,
        </li>
        <li>
            replace <strong>TypeScript</strong> function return types syntax with <strong>C#</strong> syntax,
        </li>
        <li>
            <strong><i>(optionally)</i></strong> remove <mark>this.</mark> qualification,
        </li>
        <li>
            <strong><i>(optionally)</i></strong> replace <mark>block body</mark> with <mark>expression body</mark> for one - line resulted methods
            (<a href="https://docs.microsoft.com/pl-pl/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members">read more</a>).
        </li>
    </ul>

    <p>The resulted mark should be similar to one given below:</p>

    <pre>
    <code class="language-csharp line-numbers">
@@code {
    private static string ACTIVE_STYLE = "fas";
    private static string INACTIVE_STYLE = "far";

    public int rate = 0;
    public int tempRate = 0;

    public void setRate() => rate = tempRate;

    public void showRate(int index) => tempRate = index;

    public void revertRate() => tempRate = rate;

    private bool isActive(int index) => index &lt;= tempRate;
}
            </code>
        </pre>
    };

    internal static readonly RenderFragment PointContext3 = __builder =>
    {
    <p>Blazor framework supports event handling by using a <mark>@@on{EVENT}</mark> markup (<a href="https://docs.microsoft.com/pl-pl/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#onevent">read more</a>).</p>

    <p><mark>{EVENT}</mark> can be any of the well-known <strong>DOM event handlers</strong>. To shift from those events to Razor component markup change:</p>

    <ul>
        <li>
            <mark>onclick="CapgeminiNetBlazorComponents.setRate()"</mark> to <mark>@@onclick="SetRate"</mark>,
        </li>
        <li>
            <mark>onmouseover="@@("CapgeminiNetBlazorComponents.showRate(" + i + ")")"</mark> to <mark>@@onmouseover="@@(() => ShowRate(i))"</mark>,
        </li>
        <li>
            <mark>onmouseout="CapgeminiNetBlazorComponents.revertRate()"</mark> to <mark>@@onmouseout=RevertRate</mark>.
        </li>
    </ul>

    <p>Each of those event handlers will trigger the method that can be given as a value of the event handler in several ways:</p>

    <ul>
        <li>
            by name (<mark>@@onclick="SetRate"</mark>) - to make that markup to work the method <mark>SetRate</mark> have to receive as parameters same argument types
            as <mark>@@onclick</mark> provides (in this case <mark>MouseEventArgs</mark> - <a href="https://docs.microsoft.com/pl-pl/aspnet/core/blazor/components/event-handling?view=aspnetcore-5.0#event-argument-types">read more</a>),
        </li>
        <li>
            by <a href="https://docs.microsoft.com/pl-pl/dotnet/csharp/language-reference/operators/lambda-expressions">lambda expression</a> (<mark>@@onmouseover="@@(() => ShowRate(i))"</mark>)
            when we need to provide other set of arguments or provide same argument explicitly (<a href="https://docs.microsoft.com/pl-pl/aspnet/core/blazor/components/event-handling?view=aspnetcore-5.0#lambda-expressions">read more</a>),
        </li>
        <li>
            by name without parentheses, same as regular HTML attribute values can be given - <mark>@@onmouseout=RevertRate</mark>.
        </li>
    </ul>

    <p>To get rid of errors that IDE generated all methods have to be defined, so update the <mark>@@code { }</mark> block by renaming already defined methods:</p>

    <pre>
    <code class="language-csharp line-numbers">
public void SetRate() => rate = tempRate;

public void ShowRate(int index) => tempRate = index;

public void RevertRate() => tempRate = rate;
        </code>
        </pre>
    };

    internal static readonly RenderFragment PointContext4 = __builder =>
    {
    <p>
        By replacing the DOM event handlers with Razor component syntax and <mark>C#</mark> code we didn't copy the function that was responsible for shifting back and forth two classes:
        <mark>fas</mark> (defined as a <mark>ACTIVE_STYLE</mark> constant and <mark>far</mark> (<mark>INACTIVE_STYLE</mark> (those classes are part of <a href="https://fontawesome.com/">Font Awesome</a> CSS-based icon library):
    </p>

    <div style=" display: flex; justify-content: space-around;">
        <figure style="display: flex; flex-direction: column; align-items: center;">
            <i class="fas fa-star"></i>
            <figcaption><mark>fas</mark>, <mark>fa-star</mark> class</figcaption>
        </figure>

        <figure style="display: flex; flex-direction: column; align-items: center;">
            <i class="far fa-star"></i>
            <figcaption><mark>far</mark>, <mark>fa-star</mark> class</figcaption>
        </figure>
    </div>

    <p>Highlighted lines from <mark>7</mark> to <mark>13</mark> were responsible for making Font Awesome icons to change style, based on the <mark>this.isActive(i)</mark> result:</p>

    <pre data-line="7-13">
    <code class="language-ts line-numbers">
public updateRateIconActiveState() {
    const rateIcons = document.getElementsByClassName('rate-icon');

    for (let i: number = 0; i &lt; rateIcons.length; i += 1) {
        const rateIcon = rateIcons.item(i);

        if (this.isActive(i)) {
            rateIcon.classList.add(Demo1.ACTIVE_STYLE);
            rateIcon.classList.remove(Demo1.INACTIVE_STYLE);
        } else {
            rateIcon.classList.remove(Demo1.ACTIVE_STYLE);
            rateIcon.classList.add(Demo1.INACTIVE_STYLE);
        }
    }
}
            </code>
        </pre>

    <p>
        In order to bring the same functionality back to live all that is need to be done is a use of Razor specific syntax called <mark>one-way binding</mark> syntax that will calculate the <mark>IsActive(i)</mark> value
        and based on that value will decide which style should be applied to the component like so:
    </p>

    <pre>
    <code class="language-markup line-numbers">
&lt;i class="@@(IsActive(index) ? ACTIVE_STYLE : INACTIVE_STYLE) fa-star cursor-pointer"
    @@onclick="SetRate"
    @@onmouseover="@@(() => ShowRate(index))"
    @@onmouseout=RevertRate&gt;&lt;/i&gt;
        </code>
        </pre>

    <p>That one line of code conditionally apply to the <mark>class</mark> attribute's value either <mark>fas</mark> or <mark>far</mark> class.</p>

    <p>The method name has to be updated to make the above example working:</p>

    <pre>
        <code class="language-csharp line-numbers">
private bool IsActive(int index) => index &lt;= tempRate;
        </code>
        </pre>
    };

    internal static readonly RenderFragment PointContext5 = __builder =>
    {
    <p>
        As the lambda expression <mark>@@(() => ShowRate(i))</mark> was used as a delegate-typed value for <mark>@@onmouseover</mark> event handler to be resolved upon <mark>mouseover</mark> DOM event,
        the variable <mark>i</mark> was <a href="https://docs.microsoft.com/pl-pl/dotnet/csharp/language-reference/operators/lambda-expressions#capture-of-outer-variables-and-variable-scope-in-lambda-expressions">captured</a> by the expression.
    </p>

    <p>
        Lambda expressions/statements captures variables by reference, effectively extend their lifetime beyond defined scope, not allowing them to be garbage collected until they keep the reference to them.
        The side effect of this behavior is that the <mark>@@for (int i = 0; i &lt; 5; i += 1)</mark> loop will generate <mark>5</mark> elements, each calling <mark>ShowRate(5)</mark>.
    </p>

    <p>To resolve the issue the separate variable have to be defined with a lifetime of a loop, so each time code make another pass, new variable will be created and its reference will be kept by lambda expression:</p>

    <pre data-line="3">
    <code class="language-markup line-numbers">
@@for (int i = 0; i &lt; 5; i += 1)
{
    int index = i;
    &lt;i class="@@(IsActive(index) ? ACTIVE_STYLE : INACTIVE_STYLE) fa-star cursor-pointer"
        @@onclick="SetRate"
        @@onmouseover="@@(() => ShowRate(index))"
        @@onmouseout=RevertRate&gt;&lt;/i&gt;
}
            </code>
        </pre>
    };
}
