<Title Value=".NET Community Blazor Introduction | Demo 1"></Title>
<Link href="_content/Capgemini.Net.Blazor.Components.Demo1/css/styles.css" rel="stylesheet" />

@if (Context is not null)
{
    <FullTileContainer ChecklistContext="@Context">
        <DemoEndPoint>
            <Capgemini.Net.Blazor.Components.Demo1.End.RateComponent />
        </DemoEndPoint>
        <DemoStartPoint>
            <Capgemini.Net.Blazor.Components.Demo1.Start.RateComponent />
        </DemoStartPoint>
    </FullTileContainer>
}

@code {
    internal static readonly RenderFragment PointContext1 = __builder =>
    {
        <p>In order to migrate the <strong>TypeScript</strong> logic that <mark>wwwroot/js/main.ts</mark> file contains:</p>

        <ul>
            <li>
                copy entire conent of the <mark>Capgemini.Net.Blazor.Components.Demo1</mark> class,
            </li>
            <li>
                paste it into <mark>./End/RateComponent.razor</mark> file wrapping it with <mark>@@mark {</mark> and <mark>}</mark> syntax
                which will mark a given mark as a <a href="https://docs.microsoft.com/pl-pl/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#no-locrazor-mark-blocks">Razor mark block</a>
                (in <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0">Razor components</a>,
                use <mark>@@mark</mark> over <mark>@@functions</mark> to add <strong>C#</strong> members - <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0">read more</a>),
            </li>
            <li>
                remove class constructor - Razor components didn't allow to have constructor 
                as it will be <a href="https://docs.microsoft.com/pl-pl/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#inspect-the-no-locrazor-c-class-generated-for-a-view">auto-generated</a>,</li>
            <li>
                remove <mark>updateRateIconActiveState</mark> function - it's logic will be implemented by Razor syntax,
            </li>
            <li>
                replace <strong>TypeScript</strong> variable types syntax with <strong>C#</strong> syntax,
            </li>
            <li>
                replace <strong>TypeScript</strong> funtion return types syntax with <strong>C#</strong> syntax,
            </li>
            <li>
                <strong><i>(optionaly)</i></strong> remove <mark>this.</mark> qualification,
            </li>
            <li>
                <strong><i>(optionaly)</i></strong> replace <mark>block body</mark> with <mark>expression body</mark> for one - line resulted methods
                (<a href="https://docs.microsoft.com/pl-pl/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members">read more</a>).
            </li>
        </ul>

        <p>The resulted mark should be similar to one given below:</p>

        <pre>
            <code class="language-csharp line-numbers">
@@code {
    private static string ACTIVE_STYLE = "fas";
    private static string INACTIVE_STYLE = "far";

    public int rate = 0;
    public int tempRate = 0;

    public void setRate() => rate = tempRate;

    public void showRate(int index) => tempRate = index;

    public void revertRate() => tempRate = rate;

    private bool isActive(int index) => index &lt;= tempRate;
}
            </code>
        </pre>
    };

    internal static readonly RenderFragment PointContext2 = __builder =>
    {


    };
}
