@using Capgemini.Net.Blazor.Components.Rate11.Properties;
@using Microsoft.AspNetCore.Components;
@using Microsoft.Extensions.Logging;
@using System.Threading.Tasks;

@inject ILogger<Rate> Logger

@if (Product is null)
{
    @:Loading...
}
else
{
    @: @(AvgRate?.Invoke(Product)) / @(Product.MaxRate) ( @(CurrentRate?.Invoke(Product)) )

@*<CascadingValue Value="@TempRateValue" Name="@nameof(TempRateValue)">
    <CascadingValue Value="@Focused" Name="@nameof(Focused)">
        <div @onmouseover="@(() => Focused = true)" @onmouseout="@(() => Focused = false)">
            @foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate))
            {
                <RateIcon @bind-Value="@CurrentRateValue" Rate="@i" Icon="@Icon"></RateIcon>
            }
        </div>
    </CascadingValue>
</CascadingValue>
    @: TempRateValue: @TempRateValue
    @: Focused: @Focused*@

    <CascadingValue Value="@Context" Name="@nameof(RateContext)">
        <div @onmouseover="@(() => Context.Focused = true)" @onmouseout="@(() => Context.Focused = false)">
            @foreach (int i in Enumerable.Range(Product.MinRate, Product.MaxRate))
            {
                <RateIcon @bind-Value="@CurrentRateValue" Rate="@i" Icon="@Icon" ></RateIcon>
            }
        </div>
        </CascadingValue>

    @: TempRateValue: @Context.TempRateValue
    @: Focused: @Context.Focused
}

@code {
    [Parameter]
    public IRateableProduct Product { get; set; } = default!;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    [Parameter]
    public EventCallback<int> ProductRated { get; set; }

    [Parameter]
    public RenderFragment<IRateableProduct> CurrentRate { get; set; } = (IRateableProduct product) =>@:@{ <span>@(product.CurrentRate.HasValue ? product.CurrentRate.Value.ToString() : "---")</span> }
    ;

    [Parameter]
    public RenderFragment<IRateableProduct> AvgRate { get; set; } = (IRateableProduct product) => @:@{ <span>@(product.AverageRate)</span> }
    ;

        public int CurrentRateValue
        {
            get => Product.CurrentRate ?? 0;
            set => ProductRated.InvokeAsync(value);
        }

        public RateContext Context { get; set; } = new RateContext();

        public override async Task SetParametersAsync(ParameterView parameters)
        {
            await base.SetParametersAsync(parameters);

            if (parameters.GetValueOrDefault<RenderFragment<IRateableProduct>>(nameof(CurrentRate)) is null)
            {
                Logger.LogInformation(Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(CurrentRate));
            }

            if (parameters.GetValueOrDefault<RenderFragment<IRateableProduct>>(nameof(AvgRate)) is null)
            {
                Logger.LogInformation(Resources.LOG_INFO_DEFAULT_RENDER_FRAGMENT, nameof(AvgRate));
            }
        }

        public int TempRateValue { get; set; }

        public bool Focused { get; set; }

        public class RateContext
        {
            public int TempRateValue { get; set; }

            public bool Focused { get; set; }
        }
}
