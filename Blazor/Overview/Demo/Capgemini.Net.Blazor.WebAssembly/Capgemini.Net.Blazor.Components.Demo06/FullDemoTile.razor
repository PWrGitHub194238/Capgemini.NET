<Title Value=".NET Community Blazor Introduction | Demo 6"></Title>

@if (Context is not null)
{
    <FullTileContainer ChecklistContext="@Context">
        <DemoStartPoint>
            <Capgemini.Net.Blazor.Components.Demo06.Start.WrapperComponent />
        </DemoStartPoint>
        <DemoEndPoint>
            <Capgemini.Net.Blazor.Components.Demo06.End.WrapperComponent />
        </DemoEndPoint>
    </FullTileContainer>
}

@code {
    internal static readonly RenderFragment PointContext1 = __builder =>
    {
    <p>
        As stated in <strong>./demo04</strong> a usage of <mark>CascadingValue&lt;TValue&gt;</mark> component wraps a subtree of the component hierarchy and supplies a single value to all components within that subtree (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/cascading-values-and-parameters?view=aspnetcore-5.0">read more</a>).
        Even if this is a simple way to provide any kind of primitive value or complex object of a type <mark>TValue</mark> to any component within the context of the given cascading value which provides great deal of flexibility
        it also makes it very easy to be overused. As mentioned <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/webassembly-performance-best-practices?view=aspnetcore-5.0#ensure-cascading-parameters-are-fixed">here</a>
        it can easily lead to poor performance of the application as dealing with <mark>[CascadingParameter]</mark> is more expensive that using a standard <mark>[Parameter]</mark>.
    </p>

    <p>
        In cases when the cascading object should be provided by the parent component without having a child component either to know  the name of the <mark>CascadingValue</mark> that was used nor the type of the object
        that the <mark>CascadingValue</mark> is supplying (for example 3<sup>ed</sup> party library might providing a cascading value of a given type and other 3<sup>ed</sup> party library libraries that wish to use it have no way of knowing that type)
        the <mark>RenderFragment</mark> with <mark>TValue</mark> <a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.renderfragment-1?view=aspnetcore-5.0">generic type</a> can be used (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#razor-templates">read more</a> or <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/templated-components?view=aspnetcore-5.0#template-parameters">read more</a>).
    </p>

    <p>
        Replace the <mark>RenderFragment ChildContent</mark> parameter within <mark>./Start/ContainerComponent.razor.cs</mark> code-behind file for the <mark>ContainerComponent</mark> component with a generic type:
    </p>

    <pre data-line="10">
    <code class="language-csharp line-numbers">
using Microsoft.AspNetCore.Components;

namespace Capgemini.Net.Blazor.Components.Demo06.Start
{
    public partial class ContainerComponent
    {
        private readonly RateContext rateContext = new RateContext();

        [Parameter]
        public <mark>RenderFragment&lt;RateContext&gt;</mark> ChildContent { get; set; } = default!;
    }
}
        </code>
        </pre>

    <p>
        Remove the <mark>CascadingValue</mark> from the <mark>ContainerComponent</mark> component and provide a <mark>rateContext</mark> variable as a parameter for the generic <mark>@@ChildContent</mark> invocation (if not provided
        then the variable <mark>@@ChildContent</mark> will be rendered as <mark>@@(ChildContent.ToString())</mark>):
    </p>

    <pre data-line="6-8">
    <code class="language-csharp line-numbers">
&lt;div class="demo__container_wrapper"&gt;
    &lt;EditForm Model="@@rateContext"&gt;
		&lt;!-- ... --&gt;
    &lt;/EditForm&gt;

    &lt;div class="demo__container"&gt;
        @@ChildContent(rateContext)
    &lt;/div&gt;
&lt;/div&gt;
        </code>
        </pre>

    <div class="example-figure">
        <figure>
            <div>
                <pre data-line="1, 5">
                <code class="language-csharp line-numbers">
&lt;CascadingValue Value="@@rateContext"&gt;
	&lt;div class="demo__container"&gt;
		@@ChildContent
	&lt;/div&gt;
&lt;/CascadingValue&gt;
                    </code>
                </pre>
            </div>
            <figcaption>
                <span>Supply a parameter by <mark>CascadingValue</mark> and <mark>[CascadingParameter]</mark> attribute</span>
            </figcaption>
        </figure>
        <figure>
            <div>
                <pre data-line="2">
                <code class="language-csharp line-numbers">
&lt;div class="demo__container"&gt;
    @@ChildContent(rateContext)
&lt;/div&gt;
                    </code>
                </pre>
            </div>
            <figcaption>
                <span>Supply a parameter by <mark>RenderFragment&lt;TValue&gt;</mark></span>
            </figcaption>
        </figure>
    </div>

    <p>
        Remove the <mark>CascadingParameter</mark> attribute that decorates the <mark>RateContext</mark> property in the <mark>RateComponent.razor</mark> file as it is not needed anymore:
    </p>
    <pre data-line="20">
    <code class="language-csharp line-numbers">
@@inherits RateComponentBase

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@for (int i = 0; i &lt; @@RateContext.MaxRate; i += 1)
        {
            int index = i;
            &lt;i class="@@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) @@(RateContext.Icon) cursor-pointer"
               @@onclick="SetRate"
               @@onmouseover="@@(() =&gt; ShowRate(index))"
               @@onmouseout=RevertRate&gt;&lt;/i&gt;
        }
    &lt;/div&gt;
    &lt;div class="average-rate-container"&gt;
        @@(RateContext.AvgRate)
    &lt;/div&gt;
&lt;/div&gt;

@@code {
    public RateContext RateContext { get; set; } = default!;
}
        </code>
        </pre>

    <p>
        <strong>Note:</strong> at this point code execution will result in a runtime <mark>NullReferenceException</mark> - as the <mark>RateContext</mark> for <mark>RateComponent</mark> is no longer has its value supplied
        by some <mark>CascadingValue</mark> and it also not supplied in any other way (property is not marked with <mark>Parameter</mark> attribute) then <mark>RateContext</mark> is always <mark>null</mark> which cause the
        <mark>OnParametersSet()</mark> lifecycle method to throw.
    </p>
    };

    internal static readonly RenderFragment PointContext2 = __builder =>
    {
    <p>
        To supply the value for the <mark>RateContext</mark> property of the <mark>RateComponent</mark> component open the its razor file and make the property to be a parameter.
        That will allow to use the name of the property as a <strong>HTML</strong> attribute (<mark>&lt;RateComponent RateContext="..." /&gt;</mark>):
    </p>

    <pre data-line="20">
    <code class="language-csharp line-numbers">
@@inherits RateComponentBase

&lt;div class="rate-container"&gt;
    &lt;div class="icon-rate-container"&gt;
        @@for (int i = 0; i &lt; @@RateContext.MaxRate; i += 1)
        {
            int index = i;
            &lt;i class="@@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) @@(RateContext.Icon) cursor-pointer"
               @@onclick="SetRate"
               @@onmouseover="@@(() =&gt; ShowRate(index))"
               @@onmouseout=RevertRate&gt;&lt;/i&gt;
        }
    &lt;/div&gt;
    &lt;div class="average-rate-container"&gt;
        @@(RateContext.AvgRate)
    &lt;/div&gt;
&lt;/div&gt;

@@code {
    [Parameter]
    public RateContext RateContext { get; set; } = default!;
}
        </code>
        </pre>

    <p>
        Open the <mark>./Start/WrapperComponent.razor</mark> file and supply the given markup for the component:
    </p>

    <pre data-line="2">
    <code class="language-csharp line-numbers">
&lt;ContainerComponent&gt;
    &lt;RateComponent <mark>RateContext="@@context"</mark> /&gt;
&lt;/ContainerComponent&gt;
        </code>
        </pre>

    <p>
        Using a generic <mark>RenderFragment</mark> to supply a child content markup for the component provides a <mark>@@context</mark> variable. This is a default name for the same object that was provided as a parameter
        to invoke the <mark>RenderFragment</mark> from the parent component's markup (i.e. <mark>@@ChildContent(rateContext)</mark>). It can also be renamed by assigning a value to the <mark>Context</mark> attribute (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/templated-components?view=aspnetcore-5.0#template-context-parameters">read more</a>):
    </p>

    <pre data-line="2, 4">
    <code class="language-csharp line-numbers">
&lt;ContainerComponent&gt;
    &lt;ChildContent <mark>Context="rateContext"</mark>&gt;
        &lt;RateComponent RateContext="@@rateContext" /&gt;
    &lt;/ChildContent&gt;
&lt;/ContainerComponent&gt;
        </code>
        </pre>

    <p>
        <strong>Note:</strong> in order to rename the default <mark>@@context</mark> variable, the tag named after the <mark>RenderFragment&lt;TValue&gt;</mark> parameter of the parent component has to be given explicitly (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/templated-components?view=aspnetcore-5.0#template-parameters">read more</a>).
        If the <mark>@@context</mark> variable doesn't need to be renamed and the parent component introduces only one parameter of type <mark>RenderFragment</mark> or <mark>RenderFragment&lt;TValue&gt;</mark>,
        the markup of <mark>&lt;ChildContent&gt;</mark> and <mark>&lt;/ChildContent&gt;</mark> can be omitted (if a component defines a single property of <mark>RenderFragment</mark> or <mark>RenderFragment&lt;TValue&gt;</mark> 
        by convention it has to be named <mark>ChildContent</mark> by convention so the additional markup can be added implicitly - <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#child-content">read more</a>).
    </p>
    };
}