<Title Value=".NET Community Blazor Introduction | Demo 1"></Title>
<Link href="_content/Capgemini.Net.Blazor.Components.Demo01/css/styles.css" rel="stylesheet" />

@if (Context is not null)
{
    <FullTileContainer ChecklistContext="@Context">
        <DemoStartPoint>
            <Capgemini.Net.Blazor.Components.Demo01.Start.RateComponent />
        </DemoStartPoint>
        <DemoEndPoint>
            <Capgemini.Net.Blazor.Components.Demo01.End.RateComponent />
        </DemoEndPoint>
    </FullTileContainer>
}

@code {
    internal static readonly RenderFragment PointContext1 = __builder =>
    {
        <p>
            Open a file <mark>./Start/RateComponent.razor</mark> Razor component. 
            Its content should resemble snippet that is shown below - this is a default markup provided 
            to the newly created Razor component:
        </p>

        <pre>
            <code class="language-markup line-numbers">
&lt;h3&gt;RateComponent&lt;/h3&gt;

@@code {

}
            </code>
        </pre>

        <p>
            Copy over the entire <strong>HTML</strong> markup and replace the <mark>./Start/RateComponent.razor</mark>
            content with it:
        </p>

        <pre>
            <code class="language-csharp line-numbers">
@@for (int i = 0; i &lt; 5; i += 1)
{
    &lt;i class="rate-icon far fa-star cursor-pointer"
        onclick="CapgeminiNetBlazorComponents.setRate()"
        onmouseover="@@("CapgeminiNetBlazorComponents.showRate(" + i + ")")"
        onmouseout="CapgeminiNetBlazorComponents.revertRate()"&gt;&lt;/i&gt;
}

@@code {

}
            </code>
        </pre>

        <p>
            the above code uses <strong>DOM</strong> events to call <strong>JavaScript</strong> functions 
            (within the <mark>CapgeminiNetBlazorComponents</mark> namespace):
        </p>

        <ul>
            <li>
                <mark>showRate(i)</mark> - based on the index of the <mark>&lt;i&gt;</mark> tag hovered,
                function is used to internally store the given index to mark all previous <mark>&lt;i&gt;</mark> tags
                as active. Function is trigger on <mark>mouseover</mark> <strong>DOM</strong> event.
            </li>
            <li>
                <mark>setRate()</mark> - based on the index of the <mark>&lt;i&gt;</mark> tag currently hovered, if the
                <mark>&lt;i&gt;</mark> is clicked, the index stored by the <mark>showRate(i)</mark> function
                is marked as the actual selected rate.
            </li>
            <li>
                <mark>revertRate()</mark> - on <mark>mouseout</mark> <strong>DOM</strong> event it reverts the temporary
                changes made by the <mark>onmouseover</mark> event (by replacing the stored index provided 
                by the <mark>showRate(i)</mark> function with the value stored by the <mark>setRate()</mark>).
            </li>
        </ul>

        <p>
            Actual <strong>TypeScript</strong> code that was used can be viewed 
            in the <mark>./wwwroot/js/main.ts</mark> file:
        </p>

        <pre data-line="24-27, 29-32, 34-37">
            <code class="language-ts line-numbers">
public rate: number = 0;
public tempRate: number = 0;

constructor() {
	this.updateRateIconActiveState();
}

public updateRateIconActiveState() {
	const rateIcons = document.getElementsByClassName('rate-icon');

	for (let i: number = 0; i &lt; rateIcons.length; i += 1) {
		const rateIcon = rateIcons.item(i);

		if (this.isActive(i)) {
			rateIcon.classList.add(Demo01.ACTIVE_STYLE);
			rateIcon.classList.remove(Demo01.INACTIVE_STYLE);
		} else {
			rateIcon.classList.remove(Demo01.ACTIVE_STYLE);
			rateIcon.classList.add(Demo01.INACTIVE_STYLE);
		}
	}
}

public setRate() {
	this.rate = this.tempRate;
	this.updateRateIconActiveState();
}

public showRate(index: number) {
	this.tempRate = index;
	this.updateRateIconActiveState();
}

public revertRate() {
	this.tempRate = this.rate;
	this.updateRateIconActiveState();
}

private isActive(index: number): boolean {
	return index &lt;= this.tempRate;
}
            </code>
        </pre>

        <p>
            <mark>updateRateIconActiveState()</mark> function is used to update state of all <mark>&lt;i&gt;</mark> elements
            based on the <mark>tempRate</mark> value (which is either set to the selected <mark>rate</mark> or index of 
            the currently hovered <mark>&lt;i&gt;</mark> tag if any is hovered).
        </p>
    };

    private static readonly string RAZOR_CODE_BLOCK = "https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#no-locrazor-mark-blocks";
    private static readonly string RAZOR_COMPONENTS = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0";
    private static readonly string READ_MORE_1 = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0";
    private static readonly string AUTO_GENERATED = "https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#inspect-the-no-locrazor-c-class-generated-for-a-view";
    private static readonly string READ_MORE_2 = "https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/expression-bodied-members";

    internal static readonly RenderFragment PointContext2 = __builder =>
    {
        <p>
            In order to migrate the <strong>TypeScript</strong> logic that <mark>./wwwroot/js/main.ts</mark> file contains:
        </p>

        <ul>
            <li>
                copy entire content of the <mark>Capgemini.Net.Blazor.Components.Demo01</mark>
                <strong>TypeScript</strong> class,
            </li>
            <li>
                paste it into <mark>./Start/RateComponent.razor</mark> file, wrapping it with the <mark>@@code {</mark>
                and <mark>}</mark> syntax which will mark a given code as a <a href="@RAZOR_CODE_BLOCK">Razor code block</a>
                (in <a href="@RAZOR_COMPONENTS">Razor components</a> use <mark>@@mark</mark> over <mark>@@functions</mark> to add
                <strong>C#</strong> members - <a href="@READ_MORE_1">read more</a>),
            </li>
            <li>
                remove class constructor. Razor components don't allow to define custom constructors - it
                will be <a href="@AUTO_GENERATED">auto-generated</a>,
            </li>
            <li>
                remove <mark>updateRateIconActiveState</mark> function - its logic will be implemented by Razor syntax,
            </li>
            <li>
                replace <strong>TypeScript</strong> variable types syntax with <strong>C#</strong> syntax,
            </li>
            <li>
                replace <strong>TypeScript</strong> function return types syntax with <strong>C#</strong> syntax,
            </li>
            <li>
                rename <strong>TypeScript</strong> functions from <strong>kamelCase</strong> to <strong>PascalCase</strong> <strong>C#</strong> syntax,
            </li>
            <li>
                <strong><i>(optionally)</i></strong> remove <mark>this.</mark> qualification,
            </li>
            <li>
                <strong><i>(optionally)</i></strong> replace <mark>block body</mark> with <mark>expression body</mark>
                for one-liner methods (<a href="@READ_MORE_2">read more</a>).
            </li>
        </ul>

        <p>
            The resulted code should be similar to one given below:
        </p>

        <pre>
            <code class="language-csharp line-numbers">
@@code {
    private static string ACTIVE_STYLE = "fas";
    private static string INACTIVE_STYLE = "far";

    public int rate = 0;
    public int tempRate = 0;

    public void SetRate() =&gt; rate = tempRate;

    public void ShowRate(int index) =&gt; tempRate = index;

    public void RevertRate() =&gt; tempRate = rate;

    private bool IsActive(int index) =&gt; index &lt;= tempRate;
}
            </code>
        </pre>
    };

    private static readonly string READ_MORE_3 = "https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#onevent";
    private static readonly string READ_MORE_4 = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/event-handling?view=aspnetcore-5.0#event-argument-types";
    private static readonly string LAMBDA_EXPRESSION = "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions";
    private static readonly string READ_MORE_5 = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/event-handling?view=aspnetcore-5.0#lambda-expressions";

    internal static readonly RenderFragment PointContext3 = __builder =>
    {
        <p>
            Blazor framework supports event handling by using a <mark>@@on{EVENT}</mark> 
            markup (<a href="@READ_MORE_3">read more</a>).
        </p>

        <p>
            <mark>{EVENT}</mark> can be any of the well-known <strong>DOM event handlers</strong>. 
            To shift from those events to Razor component markup change:
        </p>

        <ul>
            <li>
                <mark>onclick="CapgeminiNetBlazorComponents.setRate()"</mark> 
                to <mark>@@onclick="SetRate"</mark>,
            </li>
            <li>
                <mark>onmouseover="@@("CapgeminiNetBlazorComponents.showRate(" + i + ")")"</mark> 
                to <mark>@@onmouseover="@@(() => ShowRate(i))"</mark>,
            </li>
            <li>
                <mark>onmouseout="CapgeminiNetBlazorComponents.revertRate()"</mark> 
                to <mark>@@onmouseout=RevertRate</mark>.
            </li>
        </ul>

        <p>
            Each of those event handlers will trigger the method that can be given as a value of the event handler in several ways:
        </p>

        <ul>
            <li>
                by name (<mark>@@onclick="SetRate"</mark>) - to make that markup to work, the method <mark>SetRate</mark> have to 
                receive as parameters same argument types as <mark>@@onclick</mark> provides (in this case <mark>MouseEventArgs</mark> 
                - <a href="@READ_MORE_4">read more</a>),
            </li>
            <li>
                by <a href="@LAMBDA_EXPRESSION">lambda expression</a> (<mark>@@onmouseover="@@(() => ShowRate(i))"</mark>)
                when we need to provide other set of arguments or provide same argument explicitly (<a href="@READ_MORE_5">read more</a>),
            </li>
            <li>
                by name without parentheses. In the same manner as regular <strong>HTML</strong> attribute values 
                can be given - <mark>@@onmouseout=RevertRate</mark>.
            </li>
        </ul>
    };

    private static readonly string FONT_AWESOME = "https://fontawesome.com/";
    private static readonly string READ_MORE_6 = "https://blazor-university.com/components/one-way-binding";

    internal static readonly RenderFragment PointContext4 = __builder =>
    {
        <p>
            By replacing the <strong>DOM</strong> event handlers with Razor component syntax and <mark>C#</mark> code 
            we didn't copy the function that was responsible for shifting back and forth two classes:
            <mark>fas</mark> (defined as the <mark>ACTIVE_STYLE</mark> constant 
            and <mark>far</mark> (<mark>INACTIVE_STYLE</mark> (those classes are part of the 
            <a href="@FONT_AWESOME">Font Awesome</a> <strong>CSS</strong>-based icon library):
        </p>

        <div class="example-figure">
            <figure>
                <div>
                    <i class="fas fa-star"></i>
                </div>
                <figcaption>
                    <span><mark>fas</mark>, <mark>fa-star</mark> class</span>
                </figcaption>
            </figure>

            <figure>
                <div>
                    <i class="far fa-star"></i>
                </div>
                <figcaption>
                    <span><mark>far</mark>, <mark>fa-star</mark> class</span>
                </figcaption>
            </figure>
        </div>

        <p>
            Highlighted lines from <mark>7</mark> to <mark>13</mark> were responsible for making Font Awesome icons to change style, 
            based on the <mark>this.isActive(i)</mark> result:
        </p>

        <pre data-line="7-13">
            <code class="language-ts line-numbers">
public updateRateIconActiveState() {
    const rateIcons = document.getElementsByClassName('rate-icon');

    for (let i: number = 0; i &lt; rateIcons.length; i += 1) {
        const rateIcon = rateIcons.item(i);

        if (this.isActive(i)) {
            rateIcon.classList.add(Demo01.ACTIVE_STYLE);
            rateIcon.classList.remove(Demo01.INACTIVE_STYLE);
        } else {
            rateIcon.classList.remove(Demo01.ACTIVE_STYLE);
            rateIcon.classList.add(Demo01.INACTIVE_STYLE);
        }
    }
}
            </code>
        </pre>

        <p>
            In order to bring the same functionality back to live, all that is need to be done is a use of Razor specific syntax 
            called <mark>one-way binding</mark> that will calculate the <mark>IsActive(i)</mark> value
            and based on that value will decide which style should be applied to the component like so (<a href="@READ_MORE_6">read more</a>):
        </p>

        <pre>
            <code class="language-csharp line-numbers">
&lt;i class="@@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) fa-star cursor-pointer"
    @@onclick="SetRate"
    @@onmouseover="@@(() => ShowRate(i))"
    @@onmouseout=RevertRate&gt;&lt;/i&gt;
            </code>
        </pre>

        <p>
            That one line of code conditionally applies to the <mark>class</mark> attribute's value either 
            <mark>fas</mark> or <mark>far</mark> class.
        </p>
    };

    private static readonly string CAPTURED = "https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions#capture-of-outer-variables-and-variable-scope-in-lambda-expressions";

    internal static readonly RenderFragment PointContext5 = __builder =>
    {
        <p>
            As the lambda expression <mark>@@(() => ShowRate(i))</mark> was used as a delegate-typed value for <mark>@@onmouseover</mark> 
            event handler to be resolved upon <mark>mouseover</mark> <strong>DOM</strong> event, the variable <mark>i</mark> 
            was <a href="@CAPTURED">captured</a> by the expression.
        </p>

        <p>
            Lambda expressions/statements capture variables by reference, effectively extend their lifetime beyond defined scope, 
            not allowing them to be garbage collected until they keep the reference to them.
            The side effect of this behavior is that the <mark>@@for (int i = 0; i &lt; 5; i += 1)</mark> loop 
            will generate <mark>5</mark> <mark>&lt;i&gt;</mark> elements, each calling <mark>ShowRate(5)</mark>.
        </p>

        <p>
            To resolve the issue, the separate variable has to be defined within a lifetime of the loop (line <mark>3</mark>), 
            so each time code makes another pass,  new variable will be created and its reference 
            will be kept by lambda expression (line <mark>6</mark>):
        </p>

        <pre data-line="3, 6">
            <code class="language-markup line-numbers">
@@for (int i = 0; i &lt; 5; i += 1)
{
    int index = i;
    &lt;i class="@@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) fa-star cursor-pointer"
        @@onclick="SetRate"
        @@onmouseover="@@(() => ShowRate(index))"
        @@onmouseout=RevertRate&gt;&lt;/i&gt;
}
            </code>
        </pre>
    };
}
