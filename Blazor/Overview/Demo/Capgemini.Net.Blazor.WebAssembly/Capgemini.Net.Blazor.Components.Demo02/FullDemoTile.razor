<Title Value=".NET Community Blazor Introduction | Demo 2"></Title>
<Link href="_content/Capgemini.Net.Blazor.Components.Demo02/css/styles.css" rel="stylesheet" />

@if (Context is not null)
{
    <FullTileContainer ChecklistContext="@Context">
        <DemoStartPoint>
            <Capgemini.Net.Blazor.Components.Demo02.Start.ContainerComponent />
        </DemoStartPoint>
        <DemoEndPoint>
            <Capgemini.Net.Blazor.Components.Demo02.End.ContainerComponent />
        </DemoEndPoint>
    </FullTileContainer>
}

@code {
    private static readonly string FONT_AWESOME = "https://fontawesome.com";
    private static readonly string FA_STAR = "https://fontawesome.com/icons/star?style=regular";

    internal static readonly RenderFragment PointContext1 = __builder =>
    {
        <p>
            Edit a file <mark>./Start/ContainerComponent.razor</mark> by adding <mark>maxRate</mark> and <mark>iconIndex</mark> fields 
            to the <mark>@@code { }</mark> section. Those variables will be used to store the selection of both max rate and icon class 
            for the <mark>RateComponent</mark> that was created in <strong>demo01</strong>.
        </p>

        <pre data-line="2, 4">
            <code class="language-csharp line-numbers">
@@code {
    private int maxRate = 6;

    private int iconIndex = 0;
 }
            </code>
        </pre>

        <p>
            <mark>RateComponent</mark> utilizes the free set of <a href="@FONT_AWESOME">Font Awesome</a>'s classes 
            to display different icons like <a href="@FA_STAR">fa-star</a>.
            For instance we can use the given set of icons associated with given classes:
        </p>

        <div class="example-figure">
            <figure>
                <div>
                    <i class="far fa-star"></i>
                </div>
                <figcaption>
                    <mark>fa-star</mark>
                </figcaption>
            </figure>

            <figure>
                <div>
                    <i class="far fa-grin-stars"></i>
                </div>
                <figcaption>
                    <mark>fa-grin-stars</mark>
                </figcaption>
            </figure>

            <figure>
                <div>
                    <i class="far fa-angry"></i>
                </div>
                <figcaption>
                    <mark>fa-angry</mark>
                </figcaption>
            </figure>

            <figure>
                <div>
                    <i class="far fa-sun"></i>
                </div>
                <figcaption>
                    <mark>fa-sun</mark>
                </figcaption>
            </figure>
        </div>

        <p>
            Add an array with all given icon classes to the  <mark>@@code { }</mark>, 
            after the <mark>maxRate</mark> and <mark>iconIndex</mark> fields:
        </p>

        <pre data-line="6">
            <code class="language-csharp line-numbers">
@@code {
    private int maxRate = 6;

    private int iconIndex = 0;

    private string[] icons = new[] { "fa-star", "fa-grin-stars", "fa-angry", "fa-sun" };
}
            </code>
        </pre>
    };

    private static readonly string NESTED_COMPONENT = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#use-components";

    internal static readonly RenderFragment PointContext2 = __builder =>
    {
        <p>
            Add the following code snipped to the top of the <mark>./Start/ContainerComponent.razor</mark> file,
            before the <mark>@@code { }</mark> section added previously:
        </p>

        <pre data-line="4, 6, 11, 13, 17">
            <code class="language-markup line-numbers">
&lt;div class="demo02__container_wrapper"&gt;
    &lt;span class="demo02__label"&gt;Max rate&lt;/span&gt;
    &lt;div class="demo02__selector"&gt;
        &lt;button @@onclick="@@(() =&gt; maxRate = Math.Max(2, maxRate - 1))"&gt;-&lt;/button&gt;
            &lt;strong&gt;@@maxRate&lt;/strong&gt;
        &lt;button @@onclick="@@(() =&gt; maxRate += 1)"&gt;+&lt;/button&gt;
    &lt;/div&gt;

    &lt;span class="demo02__label"&gt;Icon&lt;/span&gt;
    &lt;div class="demo02__selector"&gt;
        &lt;button @@onclick="@@(() =&gt; iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)"&gt;-&lt;/button&gt;
            &lt;i class="far @@icons[iconIndex]"&gt;&lt;/i&gt;
        &lt;button @@onclick="@@(() =&gt; iconIndex = (iconIndex + 1) % icons.Length)"&gt;+&lt;/button&gt;
    &lt;/div&gt;

    &lt;div class="demo02__container"&gt;
        &lt;Capgemini.Net.Blazor.Components.Demo02.Start.RateComponent /&gt;
    &lt;/div&gt;
&lt;/div&gt;
            </code>
        </pre>

        <p>
            Besides the standard <strong>HTML</strong> markup with a custom styles that are already defined 
            to make the markup to render properly, several lambda expressions were written for the <mark>@@onclick</mark> handlers 
            of the buttons that will control both <mark>maxRate</mark> and <mark>iconIndex</mark> field values 
            (<mark>+</mark> will increase a given value, <mark>-</mark> will decrease it):
        </p>

        <ul>
            <li>
                <mark>@@(() => maxRate = Math.Max(2, maxRate - 1))</mark> (line <mark>4</mark>) delegate allows 
                the value of <mark>maxRate</mark> to be decreased each time <mark>-</mark> button 
                is clicked (but not less that <mark>2</mark>),
            </li>
            <li>
                <mark>@@(() => maxRate += 1)</mark> (line <mark>6</mark>) delegate allows the value of <mark>maxRate</mark> 
                to be increased endlessly,
            </li>
            <li>
                <mark>@@(() => iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)</mark> (line <mark>11</mark>) delegate
                decreases the index to be used in conjunction with <mark>icons</mark> array
                not allowing the value of <mark>iconIndex</mark> to be out of bound of that array,
            </li>
            <li>
                <mark>@@(() => iconIndex = (iconIndex + 1) % icons.Length)</mark> (line <mark>13</mark>) delegate increases the index 
                each time the <mark>+</mark> button is clicked.
            </li>
        </ul>

        <p>
            In addition to those delegates, the other Razor component specific syntax is a usage of <mark>RateComponent</mark>
            as a <a href="@NESTED_COMPONENT">nested component</a> of <mark>ContainerComponent</mark>
            with a fully qualified name (<mark>Capgemini.Net.Blazor.Components.Demo02.Start.RateComponent</mark>) which can be simplified.
        </p>
    };

    private static readonly string READ_MORE_1 = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#partial-class-support";
    private static readonly string DIRECTIVE = "https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#using";
    private static readonly string READ_MORE_2 = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#namespaces";
    private static readonly string CONVENTION = "https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#namespace";

    internal static readonly RenderFragment PointContext3 = __builder =>
    {
        <p>
            By default, to add the nested component to other component, the full qualify name has to be given.
            This behavior is exactly the same as for other <strong>.NET</strong> types.
            In fact all Razor components are compiled and represented as partial classes (<a href="@READ_MORE_1">read more</a>).
            By adding a <mark>@@using</mark> <a href="@DIRECTIVE">directive</a> with the namespace of the component's class, 
            it is possible to use only component's name as <strong>HTML</strong> tag (<a href="@READ_MORE_2">read more</a>):
        </p>

        <pre data-line="1, 6">
            <code class="language-csharp line-numbers">
@@using Capgemini.Net.Blazor.Components.Demo02.Start

// ...

&lt;div class="demo02__container"&gt;
    &lt;RateComponent /&gt;
&lt;/div&gt;
            </code>
        </pre>

        <p>
            It is also possible to move all namespaces to a separate file to not have to define them for each <strong>*.razor</strong>
            file. Blazor defines the <mark>_Imports.razor</mark> file by <a href="@CONVENTION">convention</a> which content
            (i.e. using statements) will be added by the framework to the top of each <strong>*.razor</strong> file within
            the directory of the <mark>_Imports.razor</mark>. Each directory can have its own <mark>_Imports.razor</mark> file.
            Add the <mark>@@using</mark> statement to the <mark>./_Imports.razor</mark> file:
        </p>

        <pre data-line="10">
            <code class="language-csharp line-numbers">
@@namespace Capgemini.Net.Blazor.Components.Demo02

@@using Microsoft.AspNetCore.Components.Web
@@using Microsoft.AspNetCore.Components.Rendering
@@using Microsoft.AspNetCore.Components.Web.Extensions.Head

@@using Capgemini.Net.Blazor.Components.Tile
@@using Capgemini.Net.Blazor.Components.Tile.Base

@@using Capgemini.Net.Blazor.Components.Demo02.Start
            </code>
        </pre>

        <p>
            <strong>Note:</strong> adding <mark>@@using Capgemini.Net.Blazor.Components.Demo02.Start</mark> to <mark>_Imports.razor</mark> 
            in scenario where there are multiple classes with the same name that are differing only by a namespace 
            (<mark>./Start/RateComponent.razor</mark> and <mark>./End/RateComponent.razor</mark>) will make impossible
            to call <mark>Capgemini.Net.Blazor.Components.Demo02.Start.RateComponent</mark> with component's name only.
        </p>

        <p>
            <strong>Note:</strong> if no namespace for the nested component is provided, 
            the same namespace of its container component will be used.
        </p>
    };

    private static readonly string READ_MORE_3 = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries?view=aspnetcore-5.0&tabs=visual-studio#consume-a-library-component";

    internal static readonly RenderFragment PointContext4 = __builder =>
    {
        <p>
            Add <mark>Capgemini.Net.Blazor.Components.SvgIcons</mark> dependency (<a href="@READ_MORE_3">read more</a>) 
            to the <mark>Capgemini.Net.Blazor.Components.Demo02</mark> project in order to be able to use two custom components:
        </p>

        <div class="example-figure">
            <figure>
                <div>
                    <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon />
                </div>
                <figcaption>
                    <span><mark>MinusIcon</mark> Razor component</span>
                </figcaption>
            </figure>

            <figure>
                <div>
                    <Capgemini.Net.Blazor.Components.SvgIcons.PlusIcon />
                </div>
                <figcaption>
                    <span><mark>PlusIcon</mark> Razor component</span>
                </figcaption>
            </figure>
        </div>

        <p>
            Add the default namespace for added project to <mark>RateComponent</mark> (line <mark>1</mark>) and replace the default 
            buttons with the new components (lines <mark>6</mark>, <mark>8</mark>, <mark>13</mark>, <mark>15</mark>):
        </p>

        <pre data-line="1, 6, 8, 13, 15">
            <code class="language-markup line-numbers">
@@using Capgemini.Net.Blazor.Components.SvgIcons

&lt;div class="demo02__container_wrapper"&gt;
    &lt;span class="demo02__label"&gt;Max rate&lt;/span&gt;
    &lt;div class="demo02__selector"&gt;
        &lt;MinusIcon OnClick="@@(() =&gt; maxRate = Math.Max(2, maxRate - 1))" /&gt;
            &lt;strong&gt;@@maxRate&lt;/strong&gt;
        &lt;PlusIcon OnClick="@@(() =&gt; maxRate += 1)" /&gt;
    &lt;/div&gt;

    &lt;span class="demo02__label"&gt;Icon&lt;/span&gt;
    &lt;div class="demo02__selector"&gt;
        &lt;MinusIcon OnClick="@@(() =&gt; iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)" /&gt;
            &lt;i class="far @@icons[iconIndex]"&gt;&lt;/i&gt;
        &lt;PlusIcon OnClick="@@(() =&gt; iconIndex = (iconIndex + 1) % icons.Length)" /&gt;
    &lt;/div&gt;

    &lt;div class="demo02__container"&gt;
        &lt;RateComponent /&gt;
    &lt;/div&gt;
&lt;/div&gt;
            </code>
        </pre>

        <p>
            Same as a default <mark>&lt;button&gt;</mark> <strong>HTML</strong> tag can be used with <mark>@@onclick</mark> 
            Razor component specific markup for event handler, the custom components <mark>MinusIcon</mark> and <mark>PlusIcon</mark> 
            allow to specify the delegate as a value for <mark>OnClick</mark> event handler which is internally specified 
            by both of these components.
        </p>
    };

    internal static readonly RenderFragment PointContext5 = __builder =>
    {
        <p>
            Both <mark>MinusIcon</mark> and <mark>PlusIcon</mark> also supports additional parameters like:
        </p>

        <ul>
            <li>
                <div>
                    <mark>Height</mark>/<mark>Width</mark> which will define the size for the components:
                </div>
                <div class="example-figure">
                    <figure>
                        <div>
                            <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Height="36px" Width="36px" />
                        </div>
                        <figcaption>
                            <div>Height: <mark>36px</mark></div>
                            <div>Width: <mark>36px</mark></div>
                        </figcaption>
                    </figure>

                    <figure>
                        <div>
                            <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Height="24px" Width="24px" />
                        </div>
                        <figcaption>
                            <div>Height: <mark>24px</mark></div>
                            <div>Width: <mark>24px</mark></div>
                        </figcaption>
                    </figure>

                    <figure>
                        <div>
                            <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Height="12px" Width="12px" />
                        </div>
                        <figcaption>
                            <div>Height: <mark>12px</mark></div>
                            <div>Width: <mark>12px</mark></div>
                        </figcaption>
                    </figure>
                </div>
            </li>
            <li>
                <div>
                    <mark>Theme</mark> which will define the coloring for the components:
                </div>
                <div class="example-figure">
                    <figure>
                        <div>
                            <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Theme="SvgIcons.Base.IconTheme.DARK" />
                        </div>
                        <figcaption>
                            <mark>IconTheme.DARK</mark>
                        </figcaption>
                    </figure>

                    <figure>
                        <div>
                            <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Theme="SvgIcons.Base.IconTheme.DISABLED" />
                        </div>
                        <figcaption>
                            <mark>IconTheme.DISABLED</mark>
                        </figcaption>
                    </figure>

                    <figure>
                        <div>
                            <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Theme="SvgIcons.Base.IconTheme.LIGHT" />
                        </div>
                        <figcaption>
                            <mark>IconTheme.LIGHT</mark>
                        </figcaption>
                    </figure>
                </div>
            </li>
        </ul>


        <p>
            By using the <mark>Theme</mark> parameter, set its value to <mark>IconTheme.DARK</mark> for all <mark>MinusIcon</mark> and <mark>PlusIcon</mark> to make their look and feel match the overall solution.
            <mark>IconTheme</mark> lives inside the <mark>SvgIcons.Base</mark> namespace:
        </p>

        <pre data-line="2, 8, 12, 19, 23">
            <code class="language-csharp line-numbers">
@@using Capgemini.Net.Blazor.Components.SvgIcons
@@using SvgIcons.Base

&lt;div class="demo02__container_wrapper"&gt;
    &lt;span class="demo02__label"&gt;Max rate&lt;/span&gt;
    &lt;div class="demo02__selector"&gt;
        &lt;MinusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; maxRate = Math.Max(2, maxRate - 1))" /&gt;
        &lt;strong&gt;@@maxRate&lt;/strong&gt;
        &lt;PlusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; maxRate += 1)" /&gt;
    &lt;/div&gt;

    &lt;span class="demo02__label"&gt;Icon&lt;/span&gt;
    &lt;div class="demo02__selector"&gt;
        &lt;MinusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)" /&gt;
        &lt;i class="far @@icons[iconIndex]"&gt;&lt;/i&gt;
        &lt;PlusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; iconIndex = (iconIndex + 1) % icons.Length)" /&gt;
    &lt;/div&gt;

    &lt;div class="demo02__container"&gt;
        &lt;RateComponent /&gt;
    &lt;/div&gt;
&lt;/div&gt;

@@code {
    private int maxRate = 6;

    private int iconIndex = 0;

    private string[] icons = new[] { "fa-star", "fa-grin-stars", "fa-angry", "fa-sun" };
}
            </code>
        </pre>
    };

    private static readonly string PARAMETERS = "https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#component-parameters";

    internal static readonly RenderFragment PointContext6 = __builder =>
    {
        <p>
            To make use of the <mark>maxRate</mark> and <mark>iconIndex</mark> and make <mark>RateComponent</mark> to react on any 
            of those fields' value change, <mark>RateComponent</mark> has to define <a href="@PARAMETERS">parameters</a> for both entries.
            Open the <mark>./Start/RateComponent.razor</mark> file and add <mark>MaxRate</mark> and <mark>Icon</mark> properties 
            to the <mark>@@code { }</mark> block:
        </p>

        <pre>
            <code class="language-csharp line-numbers">
@@code {
    [Parameter]
    public int MaxRate { get; set; } = 5;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    // ...
}
            </code>
        </pre>

        <p>
            The <mark>Parameter</mark> attribute allows a property to be treated as a <strong>DOM</strong> attribute 
            for the component tag which defines those properties.
            In order to pass the values from the <mark>ContainerComponent</mark>, 
            change the <mark>&lt;RateComponent /&gt;</mark> as follows:
        </p>

        <pre>
            <code class="language-markup line-numbers">
&lt;RateComponent <mark>MaxRate="@@maxRate" Icon="@@icons[iconIndex]"</mark> /&gt;
            </code>
        </pre>

        <p>
            Lastly, to make changes take effect, the actual <strong>HTML</strong> markup of the <mark>RateComponent</mark> 
            has do be changed as follows:
        </p>

        <pre data-line="1, 4">
            <code class="language-markup line-numbers">
@@for (int i = 0; i &lt; <mark>@@MaxRate</mark>; i += 1)
{
    int index = i;
    &lt;i class="@@(IsActive(i) ? ACTIVE_STYLE : INACTIVE_STYLE) <mark>@@Icon</mark> cursor-pointer"
        @@onclick="SetRate"
        @@onmouseover="@@(() =&gt; ShowRate(index))"
        @@onmouseout=RevertRate&gt;&lt;/i&gt;
}
            </code>
        </pre>

        <p>
            Changing the loop range from <mark>{ 0, ..., 4 }</mark> to <mark>{ 0, ..., @@MaxRate - 1 }</mark>, 
            providing the <mark>&lt;i&gt;</mark> tag <mark>class</mark> with the <mark>@@Icon</mark> variable
            in place of the fixed <mark>fa-star</mark> (using one-way binding), the component's content would be re-rendered 
            each time any of the properties, decorated with the <mark>Parameter</mark> attribute, changes.
        </p>
    };
}