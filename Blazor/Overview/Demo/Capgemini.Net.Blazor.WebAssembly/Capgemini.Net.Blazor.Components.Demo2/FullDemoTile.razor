<Title Value=".NET Community Blazor Introduction | Demo 2"></Title>
<Link href="_content/Capgemini.Net.Blazor.Components.Demo2/css/styles.css" rel="stylesheet" />

@if (Context is not null)
{
    <FullTileContainer ChecklistContext="@Context">
        <DemoEndPoint>
            <Capgemini.Net.Blazor.Components.Demo2.End.ContainerComponent />
        </DemoEndPoint>
        <DemoStartPoint>
            <Capgemini.Net.Blazor.Components.Demo2.Start.ContainerComponent />
        </DemoStartPoint>
    </FullTileContainer>
}

@code {
    internal static readonly RenderFragment PointContext1 = __builder =>
    {
    <p>
        Edit a file <mark>./End/ContainerComponent.razor</mark> using Razor Component template and add basic <mark>maxRate</mark> and <mark>iconIndex</mark> fields to the <mark>@@code{ }</mark> section.
        Those variables will be used to store the selection of both max rate and icon class for the <mark>RateComponent</mark> that was created in <a href="./demo1">demo1</a>.
    </p>

    <pre>
    <code class="language-csharp line-numbers">
@@code {
    private int maxRate = 6;
    private int iconIndex = 0;
}
        </code>
        </pre>

    <p>
        <mark>RateComponent</mark> utilize the free set of <a href="https://fontawesome.com/">Font Awesome</a>'s classes to display different icons like <a href="https://fontawesome.com/icons/star?style=regular">fa-star</a>.
        For instance we can use the given set of icons associated with given classes:
    </p>

    <div style="display: flex; justify-content: space-around;">
        <figure style="display: flex; flex-direction: column; align-items: center;">
            <i class="far fa-star"></i>
            <figcaption><mark>fa-star</mark></figcaption>
        </figure>

        <figure style="display: flex; flex-direction: column; align-items: center;">
            <i class="far fa-grin-stars"></i>
            <figcaption><mark>fa-grin-stars</mark></figcaption>
        </figure>

        <figure style="display: flex; flex-direction: column; align-items: center;">
            <i class="far fa-angry"></i>
            <figcaption><mark>fa-angry</mark></figcaption>
        </figure>

        <figure style="display: flex; flex-direction: column; align-items: center;">
            <i class="far fa-sun"></i>
            <figcaption><mark>fa-sun</mark></figcaption>
        </figure>
    </div>

    <p>
        Add an array with all given icon classes:
    </p>

    <pre>
    <code class="language-csharp line-numbers">
private string[] icons = new[] { "fa-star", "fa-grin-stars", "fa-angry", "fa-sun" };
        </code>
        </pre>
    };

    internal static readonly RenderFragment PointContext2 = __builder =>
    {
    <p>Add the following code snipped to the top of the <mark>./End/ContainerComponent.razor</mark>:</p>

    <pre data-line="4, 6, 11, 13, 17">
    <code class="language-markup line-numbers">
            &lt;div class="demo2__container_wrapper"&gt;
            &lt;span class="demo2__label"&gt;Max rate&lt;/span&gt;
            &lt;div class="demo2__selector"&gt;
            &lt;button @@onclick="@@(() =&gt; maxRate = Math.Max(2, maxRate - 1))"&gt;-&lt;/button&gt;
            &lt;strong&gt;@@maxRate&lt;/strong&gt;
            &lt;button @@onclick="@@(() =&gt; maxRate += 1)"&gt;+&lt;/button&gt;
            &lt;/div&gt;

            &lt;span class="demo2__label"&gt;Icon&lt;/span&gt;
            &lt;div class="demo2__selector"&gt;
            &lt;button @@onclick="@@(() =&gt; iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)"&gt;-&lt;/button&gt;
            &lt;i class="far @@icons[iconIndex]"&gt;&lt;/i&gt;
            &lt;button @@onclick="@@(() =&gt; iconIndex = (iconIndex + 1) % icons.Length)"&gt;+&lt;/button&gt;
            &lt;/div&gt;

            &lt;div class="demo2__container"&gt;
            &lt;Capgemini.Net.Blazor.Components.Demo2.End.RateComponent /&gt;
            &lt;/div&gt;
            &lt;/div&gt;
        </code>
        </pre>

    <p>
        Besides the standard HTML markup with a custom styles that are already defined to make the markup render properly, several lambda expressions was written as <mark>@@onclick</mark> handlers for the buttons
        that will control both <mark>maxRate</mark> and <mark>iconIndex</mark> field values (<mark>+</mark> will increase a given value, <mark>-</mark> will decrease):
    </p>

    <ul>
        <li>
            <mark>@@(() => maxRate = Math.Max(2, maxRate - 1))</mark> (line <mark>4</mark>) delegate allows the value of <mark>maxRate</mark> to be decreased
            each time <mark>-</mark> button is clicked (but not less that <mark>2</mark>),
        </li>
        <li>
            <mark>@@(() => maxRate += 1)</mark> (line <mark>6</mark>) delegate allows the value of <mark>maxRate</mark> to be increased endlessly,
        </li>
        <li>
            <mark>@@(() => iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)</mark> (line <mark>11</mark>) delegate decreases the index to be used in conjunction with <mark>icons</mark> array
            not allowing the value of <mark>iconIndex</mark> to be out of bound of that array,
        </li>
        <li>
            <mark>@@(() => iconIndex = (iconIndex + 1) % icons.Length)</mark> (line <mark>6</mark>) delegate increases the index each time the <mark>+</mark> button is clicked.
        </li>
    </ul>

    <p>
        In addition to those delegates, the other Razor component specific syntax is a usage of <mark>RateComponent</mark>
        as a <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#use-components">nested component</a> of <mark>ContainerComponent</mark>
        with a fully qualified name <mark>Capgemini.Net.Blazor.Components.Demo2.End</mark> which can be simplified.
    </p>
    };

    internal static readonly RenderFragment PointContext3 = __builder =>
    {
    <p>
        By default, to add the nested component to other component, the full qualify name has to be given. This behavior is exactly the same as for other **.NET** types.
        In Fact all Razor components are compiled and represented as partial classes (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#partial-class-support">read more</a>) so by adding a <mark>@@using</mark> <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#using">directive</a>
        with component's class namespace it allows to use only component's name as HTML tag (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#namespaces">read more</a>):
    </p>

    <pre>
    <code class="language-csharp line-numbers">
            @@using Capgemini.Net.Blazor.Components.Demo2.End

            // ...

            &lt;div class="demo2__container"&gt;
            &lt;RateComponent /&gt;
            &lt;/div&gt;
        </code>
        </pre>

    <p>
        It is also possible to move all namespaces to separate file, named as <mark>_Imports.razor</mark> by <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/razor?view=aspnetcore-5.0#namespace">convention</a>.
        Doing so will enable complier to search for used types in namespaces listed in that file as shown in line <mark>10</mark>:
    </p>

    <pre data-line="10">
    <code class="language-csharp line-numbers">
@@namespace Capgemini.Net.Blazor.Components.Demo2

@@using Microsoft.AspNetCore.Components.Web
@@using Microsoft.AspNetCore.Components.Rendering
@@using Microsoft.AspNetCore.Components.Web.Extensions.Head

@@using Capgemini.Net.Blazor.Components.Tile
@@using Capgemini.Net.Blazor.Components.Tile.Base

@@using Capgemini.Net.Blazor.Components.Demo2.End
        </code>
        </pre>

    <p>
        <strong>Note:</strong> adding <mark>@@using Capgemini.Net.Blazor.Components.Demo2.End</mark> to <mark>_Imports.razor</mark> in scenario where there are multiple classes with the same name
        that are differing only by a namespace (<mark>./End/RateComponent.razor</mark> and <mark>./Start/RateComponent.razor</mark>) will make impossible
        to call <mark>Capgemini.Net.Blazor.Components.Demo2.Start.RateComponent</mark> with component's name only.
    </p>
    };

    internal static readonly RenderFragment PointContext4 = __builder =>
    {
    <p>
        Add <mark>Capgemini.Net.Blazor.Components.SvgIcons</mark> dependency (<a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries?view=aspnetcore-5.0&tabs=visual-studio#consume-a-library-component">read more</a>) to the <mark>Capgemini.Net.Blazor.Components.Demo2</mark> project in order to be able to use two custom components:
    </p>

    <div style="display: flex; justify-content: space-around;">
        <figure style="display: flex; flex-direction: column; align-items: center;">
            <div style="margin-bottom: 5px;">
                <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon />
            </div>
            <figcaption><mark>MinusIcon</mark> Razor component</figcaption>
        </figure>

        <figure style="display: flex; flex-direction: column; align-items: center;">
            <div style="margin-bottom: 5px;">
                <Capgemini.Net.Blazor.Components.SvgIcons.PlusIcon />
            </div>
            <figcaption><mark>PlusIcon</mark> Razor component</figcaption>
        </figure>
    </div>

    <p>
        Add the default namespace for added project to <mark>RateComponent</mark> component (line <mark>2</mark>) and replace the default buttons with the new components (lines <mark>7</mark>, <mark>9</mark>, <mark>14</mark>, <mark>16</mark>):
    </p>

    <pre data-line="2, 7, 9, 14, 16">
    <code class="language-markup line-numbers">
            @@using Capgemini.Net.Blazor.Components.Demo2.End
            @@using Capgemini.Net.Blazor.Components.SvgIcons

            &lt;div class="demo2__container_wrapper"&gt;
            &lt;span class="demo2__label"&gt;Max rate&lt;/span&gt;
            &lt;div class="demo2__selector"&gt;
            &lt;MinusIcon OnClick="@@(() =&gt; maxRate = Math.Max(2, maxRate - 1))" /&gt;
            &lt;strong&gt;@@maxRate&lt;/strong&gt;
            &lt;PlusIcon OnClick="@@(() =&gt; maxRate += 1)" /&gt;
            &lt;/div&gt;

            &lt;span class="demo2__label"&gt;Icon&lt;/span&gt;
            &lt;div class="demo2__selector"&gt;
            &lt;MinusIcon OnClick="@@(() =&gt; iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)" /&gt;
            &lt;i class="far @@icons[iconIndex]"&gt;&lt;/i&gt;
            &lt;PlusIcon OnClick="@@(() =&gt; iconIndex = (iconIndex + 1) % icons.Length)" /&gt;
            &lt;/div&gt;

            &lt;div class="demo2__container"&gt;
            &lt;RateComponent /&gt;
            @@*&lt;Rate2 MaxRate="@@maxRate" Icon="@@icons[iconIndex]"&gt;&lt;/Rate2&gt;*@@
            &lt;/div&gt;
            &lt;/div&gt;
        </code>
        </pre>

    <p>
        Same as a default <mark>&lt;button&gt;</mark> HTML tag can be used with <mark>@@onclick</mark> Razor component specific markup for event handler,
        the custom components <mark>MinusIcon</mark> and <mark>PlusIcon</mark> allow to specify the delegate as a value for <mark>OnClick</mark> event handler which is internally specified by both of these components.
    </p>
    };

    internal static readonly RenderFragment PointContext5 = __builder =>
    {
    <p>
        Both <mark>MinusIcon</mark> and <mark>PlusIcon</mark> also supports additional parameters like:
    </p>

    <ul>
        <li>
            <div>
                <mark>Height</mark>/<mark>Width</mark> which will define the size for the components:
            </div>
            <div style="display: flex; justify-content: space-around;">
                <figure style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 5px;">
                        <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Height="36px" Width="36px" />
                    </div>
                    <figcaption style="display: flex; flex-direction: column; align-items: center;">
                        <div>Height: <mark>36px</mark></div>
                        <div>Width: <mark>36px</mark></div>
                    </figcaption>
                </figure>

                <figure style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 5px;">
                        <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Height="24px" Width="24px" />
                        </div>
                        <figcaption style="display: flex; flex-direction: column; align-items: center;">
                            <div>Height: <mark>24px</mark></div>
                            <div>Width: <mark>24px</mark></div>
                        </figcaption>
                </figure>

                <figure style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 5px;">
                        <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Height="12px" Width="12px" />
                    </div>
                    <figcaption style="display: flex; flex-direction: column; align-items: center;">
                        <div>Height: <mark>12px</mark></div>
                        <div>Width: <mark>12px</mark></div>
                    </figcaption>
                </figure>
            </div>
        </li>
        <li>
            <div>
                <mark>Theme</mark> which will define the coloring for the components:
            </div>
            <div style="display: flex; justify-content: space-around;">
                <figure style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 5px;">
                        <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Theme="SvgIcons.Base.IconTheme.DARK" />
                    </div>
                    <figcaption><mark>IconTheme.DARK</mark></figcaption>
                </figure>

                <figure style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 5px;">
                        <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Theme="SvgIcons.Base.IconTheme.DISABLED" />
                    </div>
                    <figcaption><mark>IconTheme.DISABLED</mark></figcaption>
                </figure>

                <figure style="display: flex; flex-direction: column; align-items: center;">
                    <div style="margin-bottom: 5px;">
                        <Capgemini.Net.Blazor.Components.SvgIcons.MinusIcon Theme="SvgIcons.Base.IconTheme.LIGHT" />
                    </div>
                    <figcaption><mark>IconTheme.LIGHT</mark></figcaption>
                </figure>
            </div>
        </li>
    </ul>


    <p>
        By using the <mark>Theme</mark> parameter, set its value to <mark>IconTheme.DARK</mark> for all <mark>MinusIcon</mark> and <mark>PlusIcon</mark> to make their look and feel match the overall solution.
        <mark>IconTheme</mark> lives inside the <mark>SvgIcons.Base</mark> namespace:
    </p>

    <pre>
    <code class="language-csharp line-numbers">
@@using Capgemini.Net.Blazor.Components.Demo2.End
@@using Capgemini.Net.Blazor.Components.SvgIcons
@@using SvgIcons.Base

&lt;div class="demo2__container_wrapper"&gt;
    &lt;span class="demo2__label"&gt;Max rate&lt;/span&gt;
    &lt;div class="demo2__selector"&gt;
        &lt;MinusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; maxRate = Math.Max(2, maxRate - 1))" /&gt;
        &lt;strong&gt;@@maxRate&lt;/strong&gt;
        &lt;PlusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; maxRate += 1)" /&gt;
    &lt;/div&gt;

    &lt;span class="demo2__label"&gt;Icon&lt;/span&gt;
    &lt;div class="demo2__selector"&gt;
        &lt;MinusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; iconIndex = iconIndex == 0 ? icons.Length - 1 : iconIndex - 1)" /&gt;
        &lt;i class="far @@icons[iconIndex]"&gt;&lt;/i&gt;
        &lt;PlusIcon
            Theme="IconTheme.DARK"
            OnClick="@@(() =&gt; iconIndex = (iconIndex + 1) % icons.Length)" /&gt;
    &lt;/div&gt;

    &lt;div class="demo2__container"&gt;
        &lt;RateComponent MaxRate="@@maxRate" Icon="@@icons[iconIndex]" /&gt;
    &lt;/div&gt;
&lt;/div&gt;

@@code {
    private int maxRate = 6;

    private string[] icons = new[] { "fa-star", "fa-grin-stars", "fa-angry", "fa-sun" };

    private int iconIndex = 0;
}
        </code>
        </pre>
    };


    internal static readonly RenderFragment PointContext6 = __builder =>
    {
    <p>
        To make use of the <mark>maxRate</mark> and <mark>iconIndex</mark> and make <mark>RateComponent</mark> to react on any fields' value change,
        <mark>RateComponent</mark> has to define <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/components/?view=aspnetcore-5.0#component-parameters">parameters</a> for both entries.
        Open the <mark>./End/RateComponent.razor</mark> file and add <mark>MaxRate</mark> and <mark>Icon</mark> properties to the <mark>@@code { }</mark> block:
    </p>

    <pre>
    <code class="language-csharp line-numbers">
@@code {
    [Parameter]
    public int MaxRate { get; set; } = 5;

    [Parameter]
    public string Icon { get; set; } = "fa-star";

    // ...
}
        </code>
        </pre>

    <p>
        The <mark>[Parameter]</mark> attribute allow a property to be treated as an DOM attribute for the component tag which defines those properties.
        In order to pass the values from the <mark>ContainerComponent</mark> component change the <mark>&lt;RateComponent /&gt;</mark> as follows:
    </p>

    <pre>
    <code class="language-markup line-numbers">
&lt;RateComponent MaxRate="@@maxRate" Icon="@@icons[iconIndex]" /&gt;
        </code>
        </pre>

    <p>
        Lastly, to make changes take effect, the actual HTML markup of the <mark>RateComponent</mark> has do be changed as follows:
    </p>

    <pre data-line="1, 4">
    <code class="language-markup line-numbers">
@@for (int i = 0; i &lt; <mark>@@MaxRate</mark>; i += 1)
{
    int index = i;
    &lt;i class="@@(IsActive(index) ? ACTIVE_STYLE : INACTIVE_STYLE) <mark>@@Icon</mark> cursor-pointer"
        @@onclick="SetRate"
        @@onmouseover="@@(() =&gt; ShowRate(index))"
        @@onmouseout=RevertRate&gt;&lt;/i&gt;
}
        </code>
        </pre>

    <p>
        With a change of a for loop to loop from <mark>0</mark> to <mark>@@MaxRate</mark> instead of fixed value and the <mark>&lt;i&gt;</mark> tag class fixed <mark>fa-star</mark> icon changed
        to the <mark>@@Icon</mark> with one-way binding, the component's content would be re-rendered each time any of the properties decorated with the <mark>[Parameter]</mark> attribute changes.
    </p>
    };
}