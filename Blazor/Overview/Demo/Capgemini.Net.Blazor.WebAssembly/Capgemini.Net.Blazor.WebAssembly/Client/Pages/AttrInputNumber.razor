@*@using System.Diagnostics*@
@using Microsoft.Extensions.Logging;

@typeparam TValue
@inherits InputNumber<TValue>
@inject ILogger<AttrInputNumber<TValue>> logger

<input class="form-control @CssClass" type="number" scale="1" @bind-value="@CurrentValueAsString" @bind-value:event="oninput" @attributes="@AdditionalAttributes" />

@code {

        [Parameter]
        public int Min { get; set; }

        [Parameter]
        public int Max { get; set; }


    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);

        AdditionalAttributes = CombineDictionaries(AdditionalAttributes,
            new Dictionary<string, object>
            {
                [nameof(Min).ToLower()] = Min,
                [nameof(Max).ToLower()] = Max
            });

        if (AdditionalAttributes is not null)
        {
            foreach (var kvp in AdditionalAttributes)
            {
                //Debug.WriteLine($"[SetParametersAsync][{kvp.Key}]: {kvp.Value}");
                logger.LogInformation($"[SetParametersAsync][{kvp.Key}]: {kvp.Value}");
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (AdditionalAttributes is not null)
        {
            foreach (var kvp in AdditionalAttributes)
            {
                //Debug.WriteLine($"[OnParametersSet][{kvp.Key}]: {kvp.Value}");
                logger.LogInformation($"[OnParametersSet][{kvp.Key}]: {kvp.Value}");
            }
        }
    }

    private IReadOnlyDictionary<string, object> CombineDictionaries(IReadOnlyDictionary<string, object>? source, Dictionary<string, object> result)
    {
        if (source is null)
        {
            source = new Dictionary<string, object>();
        }

        foreach (var kvp in source)
        {
            if (!result.ContainsKey(kvp.Key))
            {
                result.Add(kvp.Key, kvp.Value);
            }
        }

        return (IReadOnlyDictionary<string, object>)result;
    }
}
